!function(Q){function I(F){if(B[F])return B[F].exports;var g=B[F]={i:F,l:!1,exports:{}};return Q[F].call(g.exports,g,g.exports,I),g.l=!0,g.exports}var B={};I.m=Q,I.c=B,I.i=function(Q){return Q},I.d=function(Q,B,F){I.o(Q,B)||Object.defineProperty(Q,B,{configurable:!1,enumerable:!0,get:F})},I.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return I.d(B,"a",B),B},I.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},I.p="",I(I.s=6)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar VALUE = {\n  p: 100,\n  r: 500,\n  n: 300,\n  b: 300,\n  q: 1000,\n  k: 99999\n};\n\nvar pawnWhiteEval = [[0, 0, 0, 0, 0, 0, 0, 0], [50, 50, 50, 50, 50, 50, 50, 50], [10, 10, 20, 30, 30, 20, 10, 10], [5, 5, 10, 25, 25, 10, 5, 5], [0, 0, 0, 20, 20, 0, 0, 0], [5, -5, -10, 0, 0, -10, -5, 5], [5, 10, 10, -20, -20, 10, 10, 5], [0, 0, 0, 0, 0, 0, 0, 0]];\nvar pawnBlackEval = pawnWhiteEval.reverse();\n\nvar knightWhiteEval = [[-50, -40, -30, -30, -30, -30, -40, -50], [-40, -20, 0, 0, 0, 0, -20, -40], [-30, 0, 10, 15, 15, 10, 0, -30], [-30, 5, 15, 20, 20, 15, 5, -30], [-30, 0, 15, 20, 20, 15, 0, -30], [-30, 5, 10, 15, 15, 10, 5, -30], [-40, -20, 0, 5, 5, 0, -20, -40], [-50, -40, -30, -30, -30, -30, -40, -50]];\nvar knightBlackEval = knightWhiteEval.reverse();\n\nvar bishopWhiteEval = [[-20, -10, -10, -10, -10, -10, -10, -20], [-10, 0, 0, 0, 0, 0, 0, -10], [-10, 0, 5, 10, 10, 5, 0, -10], [-10, 5, 5, 10, 10, 5, 5, -10], [-10, 0, 10, 10, 10, 10, 0, -10], [-10, 10, 10, 10, 10, 10, 10, -10], [-10, 5, 0, 0, 0, 0, 5, -10], [-20, -10, -10, -10, -10, -10, -10, -20]];\nvar bishopBlackEval = bishopWhiteEval.reverse();\n\nvar rookWhiteEval = [[0, 0, 0, 0, 0, 0, 0, 0], [5, 10, 10, 10, 10, 10, 10, 5], [-5, 0, 0, 0, 0, 0, 0, -5], [-5, 0, 0, 0, 0, 0, 0, -5], [-5, 0, 0, 0, 0, 0, 0, -5], [-5, 0, 0, 0, 0, 0, 0, -5], [-5, 0, 0, 0, 0, 0, 0, -5], [0, 0, 0, 5, 5, 0, 0, 0]];\nvar rookBlackEval = rookWhiteEval.reverse();\n\nvar queenWhiteEval = [[-20, -10, -10, -5, -5, -10, -10, -20], [-10, 0, 0, 0, 0, 0, 0, -10], [-10, 0, 5, 5, 5, 5, 0, -10], [-5, 0, 5, 5, 5, 5, 0, -5], [0, 0, 5, 5, 5, 5, 0, -5], [-10, 5, 5, 5, 5, 5, 0, -10], [-10, 0, 5, 0, 0, 0, 0, -10], [-20, -10, -10, -5, -5, -10, -10, -20]];\nvar queenBlackEval = queenWhiteEval.reverse();\n\nvar kingWhiteEval = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]];\nvar kingBlackEval = kingWhiteEval.reverse();\n\nvar whiteSquareEval = {\n  p: pawnWhiteEval,\n  r: rookWhiteEval,\n  n: knightWhiteEval,\n  b: bishopWhiteEval,\n  q: queenWhiteEval,\n  k: kingWhiteEval\n};\n\nvar blackSquareEval = {\n  p: pawnBlackEval,\n  r: rookBlackEval,\n  n: knightBlackEval,\n  b: bishopBlackEval,\n  q: queenBlackEval,\n  k: kingBlackEval\n};\n\nvar countMaterial = exports.countMaterial = function countMaterial(board) {\n  var materialValue = 0;\n  for (var rank = 0; rank < 8; rank++) {\n    for (var file = 0; file < 8; file++) {\n      var square = board[rank][file];\n      if (square === null) continue;\n      if (square.color === 'w') {\n        materialValue += VALUE[square.type] + whiteSquareEval[square.type][rank][file];\n      } else {\n        materialValue -= VALUE[square.type] + blackSquareEval[square.type][rank][file];\n      }\n    }\n  }\n  return materialValue;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _chessboardjs = __webpack_require__(8);\n\nvar _chessboardjs2 = _interopRequireDefault(_chessboardjs);\n\nvar _chess = __webpack_require__(2);\n\nvar _chess2 = _interopRequireDefault(_chess);\n\nvar _alphabetaIds = __webpack_require__(4);\n\nvar _alphabetaOrdering = __webpack_require__(5);\n\nvar _alphabetaDirect = __webpack_require__(3);\n\nvar _minimax = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n *\n * Board highlighing is copied from Chessboard.js\n * Example # 5003\n * http://chessboardjs.com/examples#5003\n *\n */\nvar initBoard = function initBoard() {\n  var boardID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'board';\n\n  var board = void 0;\n  var game = void 0;\n  var totalWhitePositions = void 0;\n  var totalWhiteDuration = void 0;\n  var totalBlackPositions = void 0;\n  var totalBlackDuration = void 0;\n\n  var blackIsComp = function blackIsComp() {\n    return $('#black-player').find(':selected').attr('value') !== '0';\n  };\n\n  var blackSearch = function blackSearch(game, depth) {\n    var aiValue = parseInt($('#black-player').find(':selected').attr('value'));\n    if (aiValue === 1) {\n      return (0, _minimax.minimaxSearch)(game, depth);\n    }\n    if (aiValue === 2) {\n      return (0, _alphabetaDirect.alphaBetaSearch)(game, depth);\n    }\n    if (aiValue === 3) {\n      return (0, _alphabetaOrdering.alphaBetaSearch)(game, depth);\n    }\n    return (0, _alphabetaIds.alphaBetaSearch)(game, depth);\n  };\n\n  var whiteIsComp = function whiteIsComp() {\n    return $('#white-player').find(':selected').attr('value') !== '0';\n  };\n\n  var whiteSearch = function whiteSearch(game, depth) {\n    var aiValue = parseInt($('#white-player').find(':selected').attr('value'));\n    if (aiValue === 1) {\n      return (0, _minimax.minimaxSearch)(game, depth);\n    }\n    if (aiValue === 2) {\n      return (0, _alphabetaDirect.alphaBetaSearch)(game, depth);\n    }\n    if (aiValue === 3) {\n      return (0, _alphabetaOrdering.alphaBetaSearch)(game, depth);\n    }\n    return (0, _alphabetaIds.alphaBetaSearch)(game, depth);\n  };\n\n  var moveSearch = function moveSearch(game, depth) {\n    if (game.turn() === 'w') return whiteSearch(game, depth);\n    return blackSearch(game, depth);\n  };\n\n  var getBestMove = function getBestMove() {\n    checkGameOver();\n\n    var depth = game.turn() === 'w' ? parseInt($('#white-search-depth').find(':selected').text(), 10) : parseInt($('#black-search-depth').find(':selected').text(), 10);\n    var startTime = new Date().getTime();\n\n    var _moveSearch = moveSearch(game, depth),\n        bestMove = _moveSearch.move,\n        positionsGenerated = _moveSearch.positionsGenerated;\n\n    var endTime = new Date().getTime();\n    var duration = endTime - startTime;\n    var whiteMoves = Math.ceil((game.history().length + 1) / 2);\n    var blackMoves = Math.floor((game.history().length + 1) / 2);\n\n    updateStats(game.turn(), positionsGenerated, duration, whiteMoves, blackMoves);\n\n    if (game.turn() === 'b' && whiteIsComp() || game.turn() === 'w' && blackIsComp()) {\n      window.setTimeout(function () {\n        return makeMove(getBestMove());\n      }, 250);\n    }\n\n    return bestMove;\n  };\n\n  var updateStats = function updateStats(turn, positions, duration, whiteTurns, blackTurns) {\n    if (turn === 'w') {\n      totalWhiteDuration += duration;\n      totalWhitePositions += positions;\n      $('#white-num-positions').text(positions);\n      $('#white-move-time').text(duration / 1000);\n      $('#white-position-rate').text(Math.floor(positions * 1000 / duration));\n      $('#white-total-positions').text(totalWhitePositions);\n      $('#white-total-duration').text(totalWhiteDuration / 1000);\n      $('#white-avg-positions').text(Math.round(totalWhitePositions / whiteTurns));\n      $('#white-avg-duration').text((totalWhiteDuration / (1000 * whiteTurns)).toFixed(3));\n    } else {\n      totalBlackDuration += duration;\n      totalBlackPositions += positions;\n      $('#black-num-positions').text(positions);\n      $('#black-move-time').text(duration / 1000);\n      $('#black-position-rate').text(Math.floor(positions * 1000 / duration));\n      $('#black-total-positions').text(totalBlackPositions);\n      $('#black-total-duration').text(totalBlackDuration / 1000);\n      $('#black-avg-positions').text(Math.round(totalBlackPositions / blackTurns));\n      $('#black-avg-duration').text((totalBlackDuration / (1000 * blackTurns)).toFixed(3));\n    }\n  };\n\n  var resetStats = function resetStats() {\n    $('#white-num-positions').text(0);\n    $('#white-move-time').text(0);\n    $('#white-position-rate').text(0);\n    $('#white-total-positions').text(0);\n    $('#white-total-duration').text(0);\n    $('#white-avg-positions').text(0);\n    $('#white-avg-duration').text(0);\n    $('#black-num-positions').text(0);\n    $('#black-move-time').text(0);\n    $('#black-position-rate').text(0);\n    $('#black-total-positions').text(0);\n    $('#black-total-duration').text(0);\n    $('#black-avg-positions').text(0);\n    $('#black-avg-duration').text(0);\n  };\n\n  /*\n   * Start of board highlighting\n   */\n  var removeGreySquares = function removeGreySquares() {\n    $('#board .square-55d63').css('background', '');\n  };\n\n  var greySquare = function greySquare(square) {\n    var squareEl = $('#board .square-' + square);\n    var background = '#a9a9a9';\n    if (squareEl.hasClass('black-3c85d') === true) {\n      background = '#696969';\n    }\n\n    squareEl.css('background', background);\n  };\n\n  var onDragStart = function onDragStart(source, piece) {\n    // do not pick up pieces if the game is over\n    // or if it's not that side's turn\n    if (game.game_over() === true || game.turn() === 'w' && piece.search(/^b/) !== -1 || game.turn() === 'b' && piece.search(/^w/) !== -1) {\n      return false;\n    }\n  };\n\n  var onDrop = function onDrop(source, target) {\n    removeGreySquares();\n\n    // see if the move is legal\n    var move = game.move({\n      from: source,\n      to: target,\n      promotion: 'q' // NOTE: always promote to a queen for example simplicity\n    });\n\n    // illegal move\n    if (move === null) return 'snapback';\n\n    if (game.turn() === 'w' && whiteIsComp() || game.turn() === 'b' && blackIsComp()) {\n      window.setTimeout(function () {\n        return makeMove(getBestMove());\n      }, 350);\n    }\n  };\n\n  var onMouseoverSquare = function onMouseoverSquare(square, piece) {\n    // get list of possible moves for this square\n    var moves = game.moves({\n      square: square,\n      verbose: true\n    });\n\n    // exit if there are no moves available for this square\n    if (moves.length === 0) return;\n\n    // highlight the square they moused over\n    greySquare(square);\n\n    // highlight the possible squares for this piece\n    for (var i = 0; i < moves.length; i++) {\n      greySquare(moves[i].to);\n    }\n  };\n\n  var onMouseoutSquare = function onMouseoutSquare(square, piece) {\n    removeGreySquares();\n  };\n\n  var onSnapEnd = function onSnapEnd() {\n    board.position(game.fen());\n  };\n  /*\n   * End of board highlighting\n   */\n\n  var moves = function moves() {\n    var _game;\n\n    return (_game = game).moves.apply(_game, arguments);\n  };\n\n  var makeMove = function makeMove() {\n    var _game2;\n\n    var m = (_game2 = game).ugly_move.apply(_game2, arguments);\n    if (m === null) {\n      var _game3;\n\n      m = (_game3 = game).move.apply(_game3, arguments);\n    }\n    board.position(game.fen());\n    checkGameOver();\n    return !!m;\n  };\n\n  var checkGameOver = function checkGameOver() {\n    if (game.game_over()) {\n      var isDraw = game.in_draw();\n      var whoWon = game.turn() === 'w' ? 'White wins.' : 'Black wins.';\n      alert('Game Over. ' + (isDraw ? 'Draw.' : whoWon));\n      setTimeout(function () {\n        return startGame();\n      }, 1000);\n    }\n  };\n\n  var undoMove = function undoMove() {\n    game.undo();\n    board.position(game.fen());\n  };\n\n  var startGame = function startGame() {\n    game = new _chess2.default();\n    totalWhitePositions = 0;\n    totalWhiteDuration = 0;\n    totalBlackPositions = 0;\n    totalBlackDuration = 0;\n\n    var config = {\n      draggable: true,\n      position: 'start',\n      moveSpeed: 'fast',\n      snapbackSpeed: 500,\n      snapSpeed: 100,\n      onDragStart: onDragStart,\n      onDrop: onDrop,\n      onMouseoutSquare: onMouseoutSquare,\n      onMouseoverSquare: onMouseoverSquare,\n      onSnapEnd: onSnapEnd\n    };\n    board = (0, _chessboardjs2.default)(boardID, config);\n    resetStats();\n  };\n\n  startGame();\n  $('#undo-button').on('click', undoMove);\n  $('#move-button').on('click', function () {\n    return makeMove(getBestMove());\n  });\n  $('#reset-button').on('click', function () {\n    return startGame();\n  });\n\n  return { game: game, board: board, moves: moves, move: makeMove };\n};\n\nexports.default = initBoard;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS5qcz9jN2VmIl0sIm5hbWVzIjpbImluaXRCb2FyZCIsImJvYXJkSUQiLCJib2FyZCIsImdhbWUiLCJ0b3RhbFdoaXRlUG9zaXRpb25zIiwidG90YWxXaGl0ZUR1cmF0aW9uIiwidG90YWxCbGFja1Bvc2l0aW9ucyIsInRvdGFsQmxhY2tEdXJhdGlvbiIsImJsYWNrSXNDb21wIiwiJCIsImZpbmQiLCJhdHRyIiwiYmxhY2tTZWFyY2giLCJkZXB0aCIsImFpVmFsdWUiLCJwYXJzZUludCIsIndoaXRlSXNDb21wIiwid2hpdGVTZWFyY2giLCJtb3ZlU2VhcmNoIiwidHVybiIsImdldEJlc3RNb3ZlIiwiY2hlY2tHYW1lT3ZlciIsInRleHQiLCJzdGFydFRpbWUiLCJEYXRlIiwiZ2V0VGltZSIsImJlc3RNb3ZlIiwibW92ZSIsInBvc2l0aW9uc0dlbmVyYXRlZCIsImVuZFRpbWUiLCJkdXJhdGlvbiIsIndoaXRlTW92ZXMiLCJNYXRoIiwiY2VpbCIsImhpc3RvcnkiLCJsZW5ndGgiLCJibGFja01vdmVzIiwiZmxvb3IiLCJ1cGRhdGVTdGF0cyIsIndpbmRvdyIsInNldFRpbWVvdXQiLCJtYWtlTW92ZSIsInBvc2l0aW9ucyIsIndoaXRlVHVybnMiLCJibGFja1R1cm5zIiwicm91bmQiLCJ0b0ZpeGVkIiwicmVzZXRTdGF0cyIsInJlbW92ZUdyZXlTcXVhcmVzIiwiY3NzIiwiZ3JleVNxdWFyZSIsInNxdWFyZSIsInNxdWFyZUVsIiwiYmFja2dyb3VuZCIsImhhc0NsYXNzIiwib25EcmFnU3RhcnQiLCJzb3VyY2UiLCJwaWVjZSIsImdhbWVfb3ZlciIsInNlYXJjaCIsIm9uRHJvcCIsInRhcmdldCIsImZyb20iLCJ0byIsInByb21vdGlvbiIsIm9uTW91c2VvdmVyU3F1YXJlIiwibW92ZXMiLCJ2ZXJib3NlIiwiaSIsIm9uTW91c2VvdXRTcXVhcmUiLCJvblNuYXBFbmQiLCJwb3NpdGlvbiIsImZlbiIsIm0iLCJ1Z2x5X21vdmUiLCJpc0RyYXciLCJpbl9kcmF3Iiwid2hvV29uIiwiYWxlcnQiLCJzdGFydEdhbWUiLCJ1bmRvTW92ZSIsInVuZG8iLCJjb25maWciLCJkcmFnZ2FibGUiLCJtb3ZlU3BlZWQiLCJzbmFwYmFja1NwZWVkIiwic25hcFNwZWVkIiwib24iXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQVpBOzs7Ozs7O0FBZUEsSUFBTUEsWUFBWSxTQUFaQSxTQUFZLEdBQXVCO0FBQUEsTUFBdEJDLE9BQXNCLHVFQUFaLE9BQVk7O0FBQ3ZDLE1BQUlDLGNBQUo7QUFDQSxNQUFJQyxhQUFKO0FBQ0EsTUFBSUMsNEJBQUo7QUFDQSxNQUFJQywyQkFBSjtBQUNBLE1BQUlDLDRCQUFKO0FBQ0EsTUFBSUMsMkJBQUo7O0FBRUEsTUFBTUMsY0FBYyxTQUFkQSxXQUFjLEdBQU07QUFDeEIsV0FBT0MsRUFBRSxlQUFGLEVBQW1CQyxJQUFuQixDQUF3QixXQUF4QixFQUFxQ0MsSUFBckMsQ0FBMEMsT0FBMUMsTUFBdUQsR0FBOUQ7QUFDRCxHQUZEOztBQUlBLE1BQU1DLGNBQWMsU0FBZEEsV0FBYyxDQUFDVCxJQUFELEVBQU9VLEtBQVAsRUFBaUI7QUFDbkMsUUFBTUMsVUFBVUMsU0FBU04sRUFBRSxlQUFGLEVBQW1CQyxJQUFuQixDQUF3QixXQUF4QixFQUFxQ0MsSUFBckMsQ0FBMEMsT0FBMUMsQ0FBVCxDQUFoQjtBQUNBLFFBQUdHLFlBQVksQ0FBZixFQUFrQjtBQUNoQixhQUFPLDRCQUFjWCxJQUFkLEVBQW9CVSxLQUFwQixDQUFQO0FBQ0Q7QUFDRCxRQUFHQyxZQUFZLENBQWYsRUFBa0I7QUFDaEIsYUFBTyxzQ0FBZ0JYLElBQWhCLEVBQXNCVSxLQUF0QixDQUFQO0FBQ0Q7QUFDRCxRQUFHQyxZQUFZLENBQWYsRUFBa0I7QUFDaEIsYUFBTyx3Q0FBa0JYLElBQWxCLEVBQXdCVSxLQUF4QixDQUFQO0FBQ0Q7QUFDRCxXQUFPLG1DQUFhVixJQUFiLEVBQW1C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TTlDLFNBQVNyQixhQUFULENBQU47QUFBQSxHQUE5QjtBQUNBWCxJQUFFLGVBQUYsRUFBbUI4RSxFQUFuQixDQUFzQixPQUF0QixFQUErQjtBQUFBLFdBQU1SLFdBQU47QUFBQSxHQUEvQjs7QUFFQSxTQUFPLEVBQUM1RSxVQUFELEVBQU9ELFlBQVAsRUFBY2dFLFlBQWQsRUFBcUJ2QyxNQUFNYyxRQUEzQixFQUFQO0FBQ0QsQ0FuUEQ7O2tCQXFQZXpDLFMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKlxuICogQm9hcmQgaGlnaGxpZ2hpbmcgaXMgY29waWVkIGZyb20gQ2hlc3Nib2FyZC5qc1xuICogRXhhbXBsZSAjIDUwMDNcbiAqIGh0dHA6Ly9jaGVzc2JvYXJkanMuY29tL2V4YW1wbGVzIzUwMDNcbiAqXG4gKi9cbmltcG9ydCBDaGVzc0JvYXJkIGZyb20gJ2NoZXNzYm9hcmRqcyc7XG5pbXBvcnQgQ2hlc3MgZnJvbSAnLi4vbGliL2NoZXNzLmpzJztcbmltcG9ydCB7YWxwaGFCZXRhU2VhcmNoIGFzIGFscGhhQmV0YUlEU30gZnJvbSAnLi9hbHBoYWJldGEtaWRzJztcbmltcG9ydCB7YWxwaGFCZXRhU2VhcmNoIGFzIGFscGhhQmV0YU9yZGVyaW5nfSBmcm9tICcuL2FscGhhYmV0YS1vcmRlcmluZyc7XG5pbXBvcnQge2FscGhhQmV0YVNlYXJjaH0gZnJvbSAnLi9hbHBoYWJldGEtZGlyZWN0JztcbmltcG9ydCB7bWluaW1heFNlYXJjaH0gZnJvbSAnLi9taW5pbWF4JztcblxuXG5jb25zdCBpbml0Qm9hcmQgPSAoYm9hcmRJRCA9ICdib2FyZCcpID0+IHtcbiAgbGV0IGJvYXJkO1xuICBsZXQgZ2FtZTtcbiAgbGV0IHRvdGFsV2hpdGVQb3NpdGlvbnM7XG4gIGxldCB0b3RhbFdoaXRlRHVyYXRpb247XG4gIGxldCB0b3RhbEJsYWNrUG9zaXRpb25zO1xuICBsZXQgdG90YWxCbGFja0R1cmF0aW9uO1xuXG4gIGNvbnN0IGJsYWNrSXNDb21wID0gKCkgPT4ge1xuICAgIHJldHVybiAkKCcjYmxhY2stcGxheWVyJykuZmluZCgnOnNlbGVjdGVkJykuYXR0cigndmFsdWUnKSAhPT0gJzAnO1xuICB9XG5cbiAgY29uc3QgYmxhY2tTZWFyY2ggPSAoZ2FtZSwgZGVwdGgpID0+IHtcbiAgICBjb25zdCBhaVZhbHVlID0gcGFyc2VJbnQoJCgnI2JsYWNrLXBsYXllcicpLmZpbmQoJzpzZWxlY3RlZCcpLmF0dHIoJ3ZhbHVlJykpO1xuICAgIGlmKGFpVmFsdWUgPT09IDEpIHtcbiAgICAgIHJldHVybiBtaW5pbWF4U2VhcmNoKGdhbWUsIGRlcHRoKTtcbiAgICB9XG4gICAgaWYoYWlWYWx1ZSA9PT0gMikge1xuICAgICAgcmV0dXJuIGFscGhhQmV0YVNlYXJjaChnYW1lLCBkZXB0aCk7XG4gICAgfVxuICAgIGlmKGFpVmFsdWUgPT09IDMpIHtcbiAgICAgIHJldHVybiBhbHBoYUJldGFPcmRlcmluZyhnYW1lLCBkZXB0aCk7XG4gICAgfVxuICAgIHJldHVybiBhbHBoYUJldGFJRFMoZ2FtZSwgZGVwdGgpO1xuICB9XG5cbiAgY29uc3Qgd2hpdGVJc0NvbXAgPSAoKSA9PiB7XG4gICAgcmV0dXJuICAkKCcjd2hpdGUtcGxheWVyJykuZmluZCgnOnNlbGVjdGVkJykuYXR0cigndmFsdWUnKSAhPT0gJzAnO1xuICB9XG5cbiAgY29uc3Qgd2hpdGVTZWFyY2ggPSAoZ2FtZSwgZGVwdGgpID0+IHtcbiAgICBjb25zdCBhaVZhbHVlID0gcGFyc2VJbnQoJCgnI3doaXRlLXBsYXllcicpLmZpbmQoJzpzZWxlY3RlZCcpLmF0dHIoJ3ZhbHVlJykpO1xuICAgIGlmKGFpVmFsdWUgPT09IDEpIHtcbiAgICAgIHJldHVybiBtaW5pbWF4U2VhcmNoKGdhbWUsIGRlcHRoKTtcbiAgICB9XG4gICAgaWYoYWlWYWx1ZSA9PT0gMikge1xuICAgICAgcmV0dXJuIGFscGhhQmV0YVNlYXJjaChnYW1lLCBkZXB0aCk7XG4gICAgfVxuICAgIGlmKGFpVmFsdWUgPT09IDMpIHtcbiAgICAgIHJldHVybiBhbHBoYUJldGFPcmRlcmluZyhnYW1lLCBkZXB0aCk7XG4gICAgfVxuICAgIHJldHVybiBhbHBoYUJldGFJRFMoZ2FtZSwgZGVwdGgpO1xuICB9XG5cbiAgY29uc3QgbW92ZVNlYXJjaCA9IChnYW1lLCBkZXB0aCkgPT4ge1xuICAgIGlmKGdhbWUudHVybigpID09PSAndycpIHJldHVybiB3aGl0ZVNlYXJjaChnYW1lLCBkZXB0aCk7XG4gICAgcmV0dXJuIGJsYWNrU2VhcmNoKGdhbWUsIGRlcHRoKTtcbiAgfVxuXG4gIGNvbnN0IGdldEJlc3RNb3ZlID0gKCkgPT4ge1xuICAgIGNoZWNrR2FtZU92ZXIoKTtcblxuICAgIGNvbnN0IGRlcHRoID0gZ2FtZS50dXJuKCkgPT09ICd3JyA/IHBhcnNlSW50KCQoJyN3aGl0ZS1zZWFyY2gtZGVwdGgnKS5maW5kKCc6c2VsZWN0ZWQnKS50ZXh0KCksIDEwKSA6IHBhcnNlSW50KCQoJyNibGFjay1zZWFyY2gtZGVwdGgnKS5maW5kKCc6c2VsZWN0ZWQnKS50ZXh0KCksIDEwKTtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBjb25zdCB7bW92ZTogYmVzdE1vdmUsIHBvc2l0aW9uc0dlbmVyYXRlZH0gPSBtb3ZlU2VhcmNoKGdhbWUsIGRlcHRoKTtcbiAgICBjb25zdCBlbmRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgY29uc3QgZHVyYXRpb24gPSBlbmRUaW1lIC0gc3RhcnRUaW1lO1xuICAgIGNvbnN0IHdoaXRlTW92ZXMgPSBNYXRoLmNlaWwoKGdhbWUuaGlzdG9yeSgpLmxlbmd0aCsxKS8yKTtcbiAgICBjb25zdCBibGFja01vdmVzID0gTWF0aC5mbG9vcigoZ2FtZS5oaXN0b3J5KCkubGVuZ3RoKzEpLzIpO1xuXG4gICAgdXBkYXRlU3RhdHMoZ2FtZS50dXJuKCksIHBvc2l0aW9uc0dlbmVyYXRlZCwgZHVyYXRpb24sIHdoaXRlTW92ZXMsIGJsYWNrTW92ZXMpO1xuXG4gICAgaWYgKChnYW1lLnR1cm4oKSA9PT0gJ2InICYmIHdoaXRlSXNDb21wKCkpIHx8IChnYW1lLnR1cm4oKSA9PT0gJ3cnICYmIGJsYWNrSXNDb21wKCkpKSB7XG4gICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiBtYWtlTW92ZShnZXRCZXN0TW92ZSgpKSwgMjUwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmVzdE1vdmU7XG4gIH1cblxuICBjb25zdCB1cGRhdGVTdGF0cyA9ICh0dXJuLCBwb3NpdGlvbnMsIGR1cmF0aW9uLCB3aGl0ZVR1cm5zLCBibGFja1R1cm5zKSA9PiB7XG4gICAgaWYodHVybiA9PT0gJ3cnKXtcbiAgICAgIHRvdGFsV2hpdGVEdXJhdGlvbiArPSBkdXJhdGlvbjtcbiAgICAgIHRvdGFsV2hpdGVQb3NpdGlvbnMgKz0gcG9zaXRpb25zO1xuICAgICAgJCgnI3doaXRlLW51bS1wb3NpdGlvbnMnKS50ZXh0KHBvc2l0aW9ucyk7XG4gICAgICAkKCcjd2hpdGUtbW92ZS10aW1lJykudGV4dChkdXJhdGlvbi8xMDAwKTtcbiAgICAgICQoJyN3aGl0ZS1wb3NpdGlvbi1yYXRlJykudGV4dChNYXRoLmZsb29yKHBvc2l0aW9ucyAqIDEwMDAgLyBkdXJhdGlvbikpO1xuICAgICAgJCgnI3doaXRlLXRvdGFsLXBvc2l0aW9ucycpLnRleHQodG90YWxXaGl0ZVBvc2l0aW9ucyk7XG4gICAgICAkKCcjd2hpdGUtdG90YWwtZHVyYXRpb24nKS50ZXh0KHRvdGFsV2hpdGVEdXJhdGlvbi8xMDAwKTtcbiAgICAgICQoJyN3aGl0ZS1hdmctcG9zaXRpb25zJykudGV4dChNYXRoLnJvdW5kKHRvdGFsV2hpdGVQb3NpdGlvbnMvd2hpdGVUdXJucykpO1xuICAgICAgJCgnI3doaXRlLWF2Zy1kdXJhdGlvbicpLnRleHQoKHRvdGFsV2hpdGVEdXJhdGlvbiAvICgxMDAwICogd2hpdGVUdXJucykpLnRvRml4ZWQoMykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRvdGFsQmxhY2tEdXJhdGlvbiArPSBkdXJhdGlvbjtcbiAgICAgIHRvdGFsQmxhY2tQb3NpdGlvbnMgKz0gcG9zaXRpb25zO1xuICAgICAgJCgnI2JsYWNrLW51bS1wb3NpdGlvbnMnKS50ZXh0KHBvc2l0aW9ucyk7XG4gICAgICAkKCcjYmxhY2stbW92ZS10aW1lJykudGV4dChkdXJhdGlvbi8xMDAwKTtcbiAgICAgICQoJyNibGFjay1wb3NpdGlvbi1yYXRlJykudGV4dChNYXRoLmZsb29yKHBvc2l0aW9ucyAqIDEwMDAgLyBkdXJhdGlvbikpO1xuICAgICAgJCgnI2JsYWNrLXRvdGFsLXBvc2l0aW9ucycpLnRleHQodG90YWxCbGFja1Bvc2l0aW9ucyk7XG4gICAgICAkKCcjYmxhY2stdG90YWwtZHVyYXRpb24nKS50ZXh0KHRvdGFsQmxhY2tEdXJhdGlvbi8xMDAwKTtcbiAgICAgICQoJyNibGFjay1hdmctcG9zaXRpb25zJykudGV4dChNYXRoLnJvdW5kKHRvdGFsQmxhY2tQb3NpdGlvbnMvYmxhY2tUdXJucykpO1xuICAgICAgJCgnI2JsYWNrLWF2Zy1kdXJhdGlvbicpLnRleHQoKHRvdGFsQmxhY2tEdXJhdGlvbiAvICgxMDAwICogYmxhY2tUdXJucykpLnRvRml4ZWQoMykpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlc2V0U3RhdHMgPSAoKSA9PiB7XG4gICAgJCgnI3doaXRlLW51bS1wb3NpdGlvbnMnKS50ZXh0KDApO1xuICAgICQoJyN3aGl0ZS1tb3ZlLXRpbWUnKS50ZXh0KDApO1xuICAgICQoJyN3aGl0ZS1wb3NpdGlvbi1yYXRlJykudGV4dCgwKTtcbiAgICAkKCcjd2hpdGUtdG90YWwtcG9zaXRpb25zJykudGV4dCgwKTtcbiAgICAkKCcjd2hpdGUtdG90YWwtZHVyYXRpb24nKS50ZXh0KDApO1xuICAgICQoJyN3aGl0ZS1hdmctcG9zaXRpb25zJykudGV4dCgwKTtcbiAgICAkKCcjd2hpdGUtYXZnLWR1cmF0aW9uJykudGV4dCgwKTtcbiAgICAkKCcjYmxhY2stbnVtLXBvc2l0aW9ucycpLnRleHQoMCk7XG4gICAgJCgnI2JsYWNrLW1vdmUtdGltZScpLnRleHQoMCk7XG4gICAgJCgnI2JsYWNrLXBvc2l0aW9uLXJhdGUnKS50ZXh0KDApO1xuICAgICQoJyNibGFjay10b3RhbC1wb3NpdGlvbnMnKS50ZXh0KDApO1xuICAgICQoJyNibGFjay10b3RhbC1kdXJhdGlvbicpLnRleHQoMCk7XG4gICAgJCgnI2JsYWNrLWF2Zy1wb3NpdGlvbnMnKS50ZXh0KDApO1xuICAgICQoJyNibGFjay1hdmctZHVyYXRpb24nKS50ZXh0KDApO1xuICB9XG5cbiAgLypcbiAgICogU3RhcnQgb2YgYm9hcmQgaGlnaGxpZ2h0aW5nXG4gICAqL1xuICB2YXIgcmVtb3ZlR3JleVNxdWFyZXMgPSBmdW5jdGlvbigpIHtcbiAgICAkKCcjYm9hcmQgLnNxdWFyZS01NWQ2MycpLmNzcygnYmFja2dyb3VuZCcsICcnKTtcbiAgfTtcblxuICB2YXIgZ3JleVNxdWFyZSA9IGZ1bmN0aW9uKHNxdWFyZSkge1xuICAgIHZhciBzcXVhcmVFbCA9ICQoJyNib2FyZCAuc3F1YXJlLScgKyBzcXVhcmUpO1xuICAgIHZhciBiYWNrZ3JvdW5kID0gJyNhOWE5YTknO1xuICAgIGlmIChzcXVhcmVFbC5oYXNDbGFzcygnYmxhY2stM2M4NWQnKSA9PT0gdHJ1ZSkge1xuICAgICAgYmFja2dyb3VuZCA9ICcjNjk2OTY5JztcbiAgICB9XG5cbiAgICBzcXVhcmVFbC5jc3MoJ2JhY2tncm91bmQnLCBiYWNrZ3JvdW5kKTtcbiAgfTtcblxuICB2YXIgb25EcmFnU3RhcnQgPSBmdW5jdGlvbihzb3VyY2UsIHBpZWNlKSB7XG4gICAgLy8gZG8gbm90IHBpY2sgdXAgcGllY2VzIGlmIHRoZSBnYW1lIGlzIG92ZXJcbiAgICAvLyBvciBpZiBpdCdzIG5vdCB0aGF0IHNpZGUncyB0dXJuXG4gICAgaWYgKGdhbWUuZ2FtZV9vdmVyKCkgPT09IHRydWUgfHxcbiAgICAgICAgKGdhbWUudHVybigpID09PSAndycgJiYgcGllY2Uuc2VhcmNoKC9eYi8pICE9PSAtMSkgfHxcbiAgICAgICAgKGdhbWUudHVybigpID09PSAnYicgJiYgcGllY2Uuc2VhcmNoKC9edy8pICE9PSAtMSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG9uRHJvcCA9IGZ1bmN0aW9uKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgcmVtb3ZlR3JleVNxdWFyZXMoKTtcblxuICAgIC8vIHNlZSBpZiB0aGUgbW92ZSBpcyBsZWdhbFxuICAgIHZhciBtb3ZlID0gZ2FtZS5tb3ZlKHtcbiAgICAgIGZyb206IHNvdXJjZSxcbiAgICAgIHRvOiB0YXJnZXQsXG4gICAgICBwcm9tb3Rpb246ICdxJyAvLyBOT1RFOiBhbHdheXMgcHJvbW90ZSB0byBhIHF1ZWVuIGZvciBleGFtcGxlIHNpbXBsaWNpdHlcbiAgICB9KTtcblxuICAgIC8vIGlsbGVnYWwgbW92ZVxuICAgIGlmIChtb3ZlID09PSBudWxsKSByZXR1cm4gJ3NuYXBiYWNrJztcblxuICAgIGlmICgoZ2FtZS50dXJuKCkgPT09ICd3JyAmJiB3aGl0ZUlzQ29tcCgpKSB8fCAoZ2FtZS50dXJuKCkgPT09ICdiJyAmJiBibGFja0lzQ29tcCgpKSkge1xuICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gbWFrZU1vdmUoZ2V0QmVzdE1vdmUoKSksIDM1MCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBvbk1vdXNlb3ZlclNxdWFyZSA9IGZ1bmN0aW9uKHNxdWFyZSwgcGllY2UpIHtcbiAgICAvLyBnZXQgbGlzdCBvZiBwb3NzaWJsZSBtb3ZlcyBmb3IgdGhpcyBzcXVhcmVcbiAgICB2YXIgbW92ZXMgPSBnYW1lLm1vdmVzKHtcbiAgICAgIHNxdWFyZTogc3F1YXJlLFxuICAgICAgdmVyYm9zZTogdHJ1ZVxuICAgIH0pO1xuXG4gICAgLy8gZXhpdCBpZiB0aGVyZSBhcmUgbm8gbW92ZXMgYXZhaWxhYmxlIGZvciB0aGlzIHNxdWFyZVxuICAgIGlmIChtb3Zlcy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIC8vIGhpZ2hsaWdodCB0aGUgc3F1YXJlIHRoZXkgbW91c2VkIG92ZXJcbiAgICBncmV5U3F1YXJlKHNxdWFyZSk7XG5cbiAgICAvLyBoaWdobGlnaHQgdGhlIHBvc3NpYmxlIHNxdWFyZXMgZm9yIHRoaXMgcGllY2VcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vdmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBncmV5U3F1YXJlKG1vdmVzW2ldLnRvKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG9uTW91c2VvdXRTcXVhcmUgPSBmdW5jdGlvbihzcXVhcmUsIHBpZWNlKSB7XG4gICAgcmVtb3ZlR3JleVNxdWFyZXMoKTtcbiAgfTtcblxuICB2YXIgb25TbmFwRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgYm9hcmQucG9zaXRpb24oZ2FtZS5mZW4oKSk7XG4gIH07XG4gIC8qXG4gICAqIEVuZCBvZiBib2FyZCBoaWdobGlnaHRpbmdcbiAgICovXG5cbiAgY29uc3QgbW92ZXMgPSAoLi4uYXJncykgPT4ge1xuICAgIHJldHVybiBnYW1lLm1vdmVzKC4uLmFyZ3MpO1xuICB9O1xuXG4gIGNvbnN0IG1ha2VNb3ZlID0gKC4uLmFyZ3MpID0+IHtcbiAgICBsZXQgbSA9IGdhbWUudWdseV9tb3ZlKC4uLmFyZ3MpO1xuICAgIGlmIChtID09PSBudWxsKSB7XG4gICAgICBtID0gZ2FtZS5tb3ZlKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBib2FyZC5wb3NpdGlvbihnYW1lLmZlbigpKTtcbiAgICBjaGVja0dhbWVPdmVyKCk7XG4gICAgcmV0dXJuICEhbTtcbiAgfTtcblxuICBjb25zdCBjaGVja0dhbWVPdmVyID0gKCkgPT4ge1xuICAgIGlmIChnYW1lLmdhbWVfb3ZlcigpKSB7XG4gICAgICBjb25zdCBpc0RyYXcgPSBnYW1lLmluX2RyYXcoKTtcbiAgICAgIGNvbnN0IHdob1dvbiA9IGdhbWUudHVybigpID09PSAndycgPyAnV2hpdGUgd2lucy4nIDogJ0JsYWNrIHdpbnMuJztcbiAgICAgIGFsZXJ0KGBHYW1lIE92ZXIuICR7IGlzRHJhdyA/ICdEcmF3LicgOiB3aG9Xb259YCk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHN0YXJ0R2FtZSgpLCAxMDAwKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCB1bmRvTW92ZSA9ICgpID0+IHtcbiAgICBnYW1lLnVuZG8oKVxuICAgIGJvYXJkLnBvc2l0aW9uKGdhbWUuZmVuKCkpO1xuICB9XG5cbiAgY29uc3Qgc3RhcnRHYW1lID0gKCkgPT4ge1xuICAgIGdhbWUgPSBuZXcgQ2hlc3MoKTtcbiAgICB0b3RhbFdoaXRlUG9zaXRpb25zID0gMDtcbiAgICB0b3RhbFdoaXRlRHVyYXRpb24gPSAwO1xuICAgIHRvdGFsQmxhY2tQb3NpdGlvbnMgPSAwO1xuICAgIHRvdGFsQmxhY2tEdXJhdGlvbiA9IDA7XG5cbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgICBwb3NpdGlvbjogJ3N0YXJ0JyxcbiAgICAgIG1vdmVTcGVlZDogJ2Zhc3QnLFxuICAgICAgc25hcGJhY2tTcGVlZDogNTAwLFxuICAgICAgc25hcFNwZWVkOiAxMDAsXG4gICAgICBvbkRyYWdTdGFydDogb25EcmFnU3RhcnQsXG4gICAgICBvbkRyb3A6IG9uRHJvcCxcbiAgICAgIG9uTW91c2VvdXRTcXVhcmU6IG9uTW91c2VvdXRTcXVhcmUsXG4gICAgICBvbk1vdXNlb3ZlclNxdWFyZTogb25Nb3VzZW92ZXJTcXVhcmUsXG4gICAgICBvblNuYXBFbmQ6IG9uU25hcEVuZCxcbiAgICB9XG4gICAgYm9hcmQgPSBDaGVzc0JvYXJkKGJvYXJkSUQsIGNvbmZpZyk7XG4gICAgcmVzZXRTdGF0cygpO1xuICB9O1xuXG4gIHN0YXJ0R2FtZSgpO1xuICAkKCcjdW5kby1idXR0b24nKS5vbignY2xpY2snLCB1bmRvTW92ZSk7XG4gICQoJyNtb3ZlLWJ1dHRvbicpLm9uKCdjbGljaycsICgpID0+IG1ha2VNb3ZlKGdldEJlc3RNb3ZlKCkpKTtcbiAgJCgnI3Jlc2V0LWJ1dHRvbicpLm9uKCdjbGljaycsICgpID0+IHN0YXJ0R2FtZSgpKTtcblxuICByZXR1cm4ge2dhbWUsIGJvYXJkLCBtb3ZlcywgbW92ZTogbWFrZU1vdmV9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbml0Qm9hcmQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZ2FtZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("var __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n * Copyright (c) 2017, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\n/* minified license below  */\n\n/* @license\n * Copyright (c) 2017, Jeff Hlywa (jhlywa@gmail.com)\n * Released under the BSD license\n * https://github.com/jhlywa/chess.js/blob/master/LICENSE\n */\n\nvar Chess = function Chess(fen) {\n\n    /* jshint indent: false */\n\n    var BLACK = 'b';\n    var WHITE = 'w';\n\n    var EMPTY = -1;\n\n    var PAWN = 'p';\n    var KNIGHT = 'n';\n    var BISHOP = 'b';\n    var ROOK = 'r';\n    var QUEEN = 'q';\n    var KING = 'k';\n\n    var SYMBOLS = 'pnbrqkPNBRQK';\n\n    var DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n\n    var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*'];\n\n    var PAWN_OFFSETS = {\n        b: [16, 32, 17, 15],\n        w: [-16, -32, -17, -15]\n    };\n\n    var PIECE_OFFSETS = {\n        n: [-18, -33, -31, -14, 18, 33, 31, 14],\n        b: [-17, -15, 17, 15],\n        r: [-16, 1, 16, -1],\n        q: [-17, -16, -15, 1, 17, 16, 15, -1],\n        k: [-17, -16, -15, 1, 17, 16, 15, -1]\n    };\n\n    var ATTACKS = [20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20];\n\n    var RAYS = [17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0, 0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0, -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17];\n\n    var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 };\n\n    var FLAGS = {\n        NORMAL: 'n',\n        CAPTURE: 'c',\n        BIG_PAWN: 'b',\n        EP_CAPTURE: 'e',\n        PROMOTION: 'p',\n        KSIDE_CASTLE: 'k',\n        QSIDE_CASTLE: 'q'\n    };\n\n    var BITS = {\n        NORMAL: 1,\n        CAPTURE: 2,\n        BIG_PAWN: 4,\n        EP_CAPTURE: 8,\n        PROMOTION: 16,\n        KSIDE_CASTLE: 32,\n        QSIDE_CASTLE: 64\n    };\n\n    var RANK_1 = 7;\n    var RANK_2 = 6;\n    var RANK_3 = 5;\n    var RANK_4 = 4;\n    var RANK_5 = 3;\n    var RANK_6 = 2;\n    var RANK_7 = 1;\n    var RANK_8 = 0;\n\n    var SQUARES = {\n        a8: 0, b8: 1, c8: 2, d8: 3, e8: 4, f8: 5, g8: 6, h8: 7,\n        a7: 16, b7: 17, c7: 18, d7: 19, e7: 20, f7: 21, g7: 22, h7: 23,\n        a6: 32, b6: 33, c6: 34, d6: 35, e6: 36, f6: 37, g6: 38, h6: 39,\n        a5: 48, b5: 49, c5: 50, d5: 51, e5: 52, f5: 53, g5: 54, h5: 55,\n        a4: 64, b4: 65, c4: 66, d4: 67, e4: 68, f4: 69, g4: 70, h4: 71,\n        a3: 80, b3: 81, c3: 82, d3: 83, e3: 84, f3: 85, g3: 86, h3: 87,\n        a2: 96, b2: 97, c2: 98, d2: 99, e2: 100, f2: 101, g2: 102, h2: 103,\n        a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n    };\n\n    var ROOKS = {\n        w: [{ square: SQUARES.a1, flag: BITS.QSIDE_CASTLE }, { square: SQUARES.h1, flag: BITS.KSIDE_CASTLE }],\n        b: [{ square: SQUARES.a8, flag: BITS.QSIDE_CASTLE }, { square: SQUARES.h8, flag: BITS.KSIDE_CASTLE }]\n    };\n\n    var _board = new Array(128);\n    var kings = { w: EMPTY, b: EMPTY };\n    var _turn = WHITE;\n    var castling = { w: 0, b: 0 };\n    var ep_square = EMPTY;\n    var half_moves = 0;\n    var move_number = 1;\n    var _history = [];\n    var header = {};\n\n    /* if the user passes in a fen string, load it, else default to\n     * starting position\n     */\n    if (typeof fen === 'undefined') {\n        _load(DEFAULT_POSITION);\n    } else {\n        _load(fen);\n    }\n\n    function _clear() {\n        _board = new Array(128);\n        kings = { w: EMPTY, b: EMPTY };\n        _turn = WHITE;\n        castling = { w: 0, b: 0 };\n        ep_square = EMPTY;\n        half_moves = 0;\n        move_number = 1;\n        _history = [];\n        header = {};\n        update_setup(generate_fen());\n    }\n\n    function _reset() {\n        _load(DEFAULT_POSITION);\n    }\n\n    function _load(fen) {\n        var tokens = fen.split(/\\s+/);\n        var position = tokens[0];\n        var square = 0;\n\n        if (!_validate_fen(fen).valid) {\n            return false;\n        }\n\n        _clear();\n\n        for (var i = 0; i < position.length; i++) {\n            var piece = position.charAt(i);\n\n            if (piece === '/') {\n                square += 8;\n            } else if (is_digit(piece)) {\n                square += parseInt(piece, 10);\n            } else {\n                var color = piece < 'a' ? WHITE : BLACK;\n                _put({ type: piece.toLowerCase(), color: color }, algebraic(square));\n                square++;\n            }\n        }\n\n        _turn = tokens[1];\n\n        if (tokens[2].indexOf('K') > -1) {\n            castling.w |= BITS.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('Q') > -1) {\n            castling.w |= BITS.QSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('k') > -1) {\n            castling.b |= BITS.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('q') > -1) {\n            castling.b |= BITS.QSIDE_CASTLE;\n        }\n\n        ep_square = tokens[3] === '-' ? EMPTY : SQUARES[tokens[3]];\n        half_moves = parseInt(tokens[4], 10);\n        move_number = parseInt(tokens[5], 10);\n\n        update_setup(generate_fen());\n\n        return true;\n    }\n\n    /* TODO: this function is pretty much crap - it validates structure but\n     * completely ignores content (e.g. doesn't verify that each side has a king)\n     * ... we should rewrite this, and ditch the silly error_number field while\n     * we're at it\n     */\n    function _validate_fen(fen) {\n        var errors = {\n            0: 'No errors.',\n            1: 'FEN string must contain six space-delimited fields.',\n            2: '6th field (move number) must be a positive integer.',\n            3: '5th field (half move counter) must be a non-negative integer.',\n            4: '4th field (en-passant square) is invalid.',\n            5: '3rd field (castling availability) is invalid.',\n            6: '2nd field (side to move) is invalid.',\n            7: '1st field (piece positions) does not contain 8 \\'/\\'-delimited rows.',\n            8: '1st field (piece positions) is invalid [consecutive numbers].',\n            9: '1st field (piece positions) is invalid [invalid piece].',\n            10: '1st field (piece positions) is invalid [row too large].',\n            11: 'Illegal en-passant square'\n        };\n\n        /* 1st criterion: 6 space-seperated fields? */\n        var tokens = fen.split(/\\s+/);\n        if (tokens.length !== 6) {\n            return { valid: false, error_number: 1, error: errors[1] };\n        }\n\n        /* 2nd criterion: move number field is a integer value > 0? */\n        if (isNaN(tokens[5]) || parseInt(tokens[5], 10) <= 0) {\n            return { valid: false, error_number: 2, error: errors[2] };\n        }\n\n        /* 3rd criterion: half move counter is an integer >= 0? */\n        if (isNaN(tokens[4]) || parseInt(tokens[4], 10) < 0) {\n            return { valid: false, error_number: 3, error: errors[3] };\n        }\n\n        /* 4th criterion: 4th field is a valid e.p.-string? */\n        if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n            return { valid: false, error_number: 4, error: errors[4] };\n        }\n\n        /* 5th criterion: 3th field is a valid castle-string? */\n        if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n            return { valid: false, error_number: 5, error: errors[5] };\n        }\n\n        /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n        if (!/^(w|b)$/.test(tokens[1])) {\n            return { valid: false, error_number: 6, error: errors[6] };\n        }\n\n        /* 7th criterion: 1st field contains 8 rows? */\n        var rows = tokens[0].split('/');\n        if (rows.length !== 8) {\n            return { valid: false, error_number: 7, error: errors[7] };\n        }\n\n        /* 8th criterion: every row is valid? */\n        for (var i = 0; i < rows.length; i++) {\n            /* check for right sum of fields AND not two numbers in succession */\n            var sum_fields = 0;\n            var previous_was_number = false;\n\n            for (var k = 0; k < rows[i].length; k++) {\n                if (!isNaN(rows[i][k])) {\n                    if (previous_was_number) {\n                        return { valid: false, error_number: 8, error: errors[8] };\n                    }\n                    sum_fields += parseInt(rows[i][k], 10);\n                    previous_was_number = true;\n                } else {\n                    if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n                        return { valid: false, error_number: 9, error: errors[9] };\n                    }\n                    sum_fields += 1;\n                    previous_was_number = false;\n                }\n            }\n            if (sum_fields !== 8) {\n                return { valid: false, error_number: 10, error: errors[10] };\n            }\n        }\n\n        if (tokens[3][1] == '3' && tokens[1] == 'w' || tokens[3][1] == '6' && tokens[1] == 'b') {\n            return { valid: false, error_number: 11, error: errors[11] };\n        }\n\n        /* everything's okay! */\n        return { valid: true, error_number: 0, error: errors[0] };\n    }\n\n    function generate_fen() {\n        var empty = 0;\n        var fen = '';\n\n        for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n            if (_board[i] == null) {\n                empty++;\n            } else {\n                if (empty > 0) {\n                    fen += empty;\n                    empty = 0;\n                }\n                var color = _board[i].color;\n                var piece = _board[i].type;\n\n                fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n            }\n\n            if (i + 1 & 0x88) {\n                if (empty > 0) {\n                    fen += empty;\n                }\n\n                if (i !== SQUARES.h1) {\n                    fen += '/';\n                }\n\n                empty = 0;\n                i += 8;\n            }\n        }\n\n        var cflags = '';\n        if (castling[WHITE] & BITS.KSIDE_CASTLE) {\n            cflags += 'K';\n        }\n        if (castling[WHITE] & BITS.QSIDE_CASTLE) {\n            cflags += 'Q';\n        }\n        if (castling[BLACK] & BITS.KSIDE_CASTLE) {\n            cflags += 'k';\n        }\n        if (castling[BLACK] & BITS.QSIDE_CASTLE) {\n            cflags += 'q';\n        }\n\n        /* do we have an empty castling flag? */\n        cflags = cflags || '-';\n        var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square);\n\n        return [fen, _turn, cflags, epflags, half_moves, move_number].join(' ');\n    }\n\n    function set_header(args) {\n        for (var i = 0; i < args.length; i += 2) {\n            if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n                header[args[i]] = args[i + 1];\n            }\n        }\n        return header;\n    }\n\n    /* called when the initial board setup is changed with put() or remove().\n     * modifies the SetUp and FEN properties of the header object.  if the FEN is\n     * equal to the default position, the SetUp and FEN are deleted\n     * the setup is only updated if history.length is zero, ie moves haven't been\n     * made.\n     */\n    function update_setup(fen) {\n        if (_history.length > 0) return;\n\n        if (fen !== DEFAULT_POSITION) {\n            header['SetUp'] = '1';\n            header['FEN'] = fen;\n        } else {\n            delete header['SetUp'];\n            delete header['FEN'];\n        }\n    }\n\n    function _get(square) {\n        var piece = _board[SQUARES[square]];\n        return piece ? { type: piece.type, color: piece.color } : null;\n    }\n\n    function _put(piece, square) {\n        /* check for valid piece object */\n        if (!('type' in piece && 'color' in piece)) {\n            return false;\n        }\n\n        /* check for piece */\n        if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n            return false;\n        }\n\n        /* check for valid square */\n        if (!(square in SQUARES)) {\n            return false;\n        }\n\n        var sq = SQUARES[square];\n\n        /* don't let the user place more than one king */\n        if (piece.type == KING && !(kings[piece.color] == EMPTY || kings[piece.color] == sq)) {\n            return false;\n        }\n\n        _board[sq] = { type: piece.type, color: piece.color };\n        if (piece.type === KING) {\n            kings[piece.color] = sq;\n        }\n\n        update_setup(generate_fen());\n\n        return true;\n    }\n\n    function _remove(square) {\n        var piece = _get(square);\n        _board[SQUARES[square]] = null;\n        if (piece && piece.type === KING) {\n            kings[piece.color] = EMPTY;\n        }\n\n        update_setup(generate_fen());\n\n        return piece;\n    }\n\n    function build_move(board, from, to, flags, promotion) {\n        var move = {\n            color: _turn,\n            from: from,\n            to: to,\n            flags: flags,\n            piece: board[from].type\n        };\n\n        if (promotion) {\n            move.flags |= BITS.PROMOTION;\n            move.promotion = promotion;\n        }\n\n        if (board[to]) {\n            move.captured = board[to].type;\n        } else if (flags & BITS.EP_CAPTURE) {\n            move.captured = PAWN;\n        }\n        return move;\n    }\n\n    function generate_moves(options) {\n        function add_move(board, moves, from, to, flags) {\n            /* if pawn promotion */\n            if (board[from].type === PAWN && (rank(to) === RANK_8 || rank(to) === RANK_1)) {\n                var pieces = [QUEEN, ROOK, BISHOP, KNIGHT];\n                for (var i = 0, len = pieces.length; i < len; i++) {\n                    moves.push(build_move(board, from, to, flags, pieces[i]));\n                }\n            } else {\n                moves.push(build_move(board, from, to, flags));\n            }\n        }\n\n        var moves = [];\n        var us = _turn;\n        var them = swap_color(us);\n        var second_rank = { b: RANK_7, w: RANK_2 };\n\n        var first_sq = SQUARES.a8;\n        var last_sq = SQUARES.h1;\n        var single_square = false;\n\n        /* do we want legal moves? */\n        var legal = typeof options !== 'undefined' && 'legal' in options ? options.legal : true;\n\n        /* are we generating moves for a single square? */\n        if (typeof options !== 'undefined' && 'square' in options) {\n            if (options.square in SQUARES) {\n                first_sq = last_sq = SQUARES[options.square];\n                single_square = true;\n            } else {\n                /* invalid square */\n                return [];\n            }\n        }\n\n        for (var i = first_sq; i <= last_sq; i++) {\n            /* did we run off the end of the board */\n            if (i & 0x88) {\n                i += 7;continue;\n            }\n\n            var piece = _board[i];\n            if (piece == null || piece.color !== us) {\n                continue;\n            }\n\n            if (piece.type === PAWN) {\n                /* single square, non-capturing */\n                var square = i + PAWN_OFFSETS[us][0];\n                if (_board[square] == null) {\n                    add_move(_board, moves, i, square, BITS.NORMAL);\n\n                    /* double square */\n                    var square = i + PAWN_OFFSETS[us][1];\n                    if (second_rank[us] === rank(i) && _board[square] == null) {\n                        add_move(_board, moves, i, square, BITS.BIG_PAWN);\n                    }\n                }\n\n                /* pawn captures */\n                for (j = 2; j < 4; j++) {\n                    var square = i + PAWN_OFFSETS[us][j];\n                    if (square & 0x88) continue;\n\n                    if (_board[square] != null && _board[square].color === them) {\n                        add_move(_board, moves, i, square, BITS.CAPTURE);\n                    } else if (square === ep_square) {\n                        add_move(_board, moves, i, ep_square, BITS.EP_CAPTURE);\n                    }\n                }\n            } else {\n                for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n                    var offset = PIECE_OFFSETS[piece.type][j];\n                    var square = i;\n\n                    while (true) {\n                        square += offset;\n                        if (square & 0x88) break;\n\n                        if (_board[square] == null) {\n                            add_move(_board, moves, i, square, BITS.NORMAL);\n                        } else {\n                            if (_board[square].color === us) break;\n                            add_move(_board, moves, i, square, BITS.CAPTURE);\n                            break;\n                        }\n\n                        /* break, if knight or king */\n                        if (piece.type === 'n' || piece.type === 'k') break;\n                    }\n                }\n            }\n        }\n\n        /* check for castling if: a) we're generating all moves, or b) we're doing\n         * single square move generation on the king's square\n         */\n        if (!single_square || last_sq === kings[us]) {\n            /* king-side castling */\n            if (castling[us] & BITS.KSIDE_CASTLE) {\n                var castling_from = kings[us];\n                var castling_to = castling_from + 2;\n\n                if (_board[castling_from + 1] == null && _board[castling_to] == null && !attacked(them, kings[us]) && !attacked(them, castling_from + 1) && !attacked(them, castling_to)) {\n                    add_move(_board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE);\n                }\n            }\n\n            /* queen-side castling */\n            if (castling[us] & BITS.QSIDE_CASTLE) {\n                var castling_from = kings[us];\n                var castling_to = castling_from - 2;\n\n                if (_board[castling_from - 1] == null && _board[castling_from - 2] == null && _board[castling_from - 3] == null && !attacked(them, kings[us]) && !attacked(them, castling_from - 1) && !attacked(them, castling_to)) {\n                    add_move(_board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE);\n                }\n            }\n        }\n\n        /* return all pseudo-legal moves (this includes moves that allow the king\n         * to be captured)\n         */\n        if (!legal) {\n            return moves;\n        }\n\n        /* filter out illegal moves */\n        var legal_moves = [];\n        for (var i = 0, len = moves.length; i < len; i++) {\n            make_move(moves[i]);\n            if (!king_attacked(us)) {\n                legal_moves.push(moves[i]);\n            }\n            undo_move();\n        }\n\n        return legal_moves;\n    }\n\n    /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n     * (SAN)\n     *\n     * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n     * disambiguation bugs in Fritz and Chessbase.  See below:\n     *\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n     * 4. ... Ne7 is technically the valid SAN\n     */\n    function move_to_san(move, sloppy) {\n\n        var output = '';\n\n        if (move.flags & BITS.KSIDE_CASTLE) {\n            output = 'O-O';\n        } else if (move.flags & BITS.QSIDE_CASTLE) {\n            output = 'O-O-O';\n        } else {\n            var disambiguator = get_disambiguator(move, sloppy);\n\n            if (move.piece !== PAWN) {\n                output += move.piece.toUpperCase() + disambiguator;\n            }\n\n            if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n                if (move.piece === PAWN) {\n                    output += algebraic(move.from)[0];\n                }\n                output += 'x';\n            }\n\n            output += algebraic(move.to);\n\n            if (move.flags & BITS.PROMOTION) {\n                output += '=' + move.promotion.toUpperCase();\n            }\n        }\n\n        make_move(move);\n        if (_in_check()) {\n            if (_in_checkmate()) {\n                output += '#';\n            } else {\n                output += '+';\n            }\n        }\n        undo_move();\n\n        return output;\n    }\n\n    // parses all of the decorators out of a SAN string\n    function stripped_san(move) {\n        return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n    }\n\n    function attacked(color, square) {\n        for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n            /* did we run off the end of the board */\n            if (i & 0x88) {\n                i += 7;continue;\n            }\n\n            /* if empty square or wrong color */\n            if (_board[i] == null || _board[i].color !== color) continue;\n\n            var piece = _board[i];\n            var difference = i - square;\n            var index = difference + 119;\n\n            if (ATTACKS[index] & 1 << SHIFTS[piece.type]) {\n                if (piece.type === PAWN) {\n                    if (difference > 0) {\n                        if (piece.color === WHITE) return true;\n                    } else {\n                        if (piece.color === BLACK) return true;\n                    }\n                    continue;\n                }\n\n                /* if the piece is a knight or a king */\n                if (piece.type === 'n' || piece.type === 'k') return true;\n\n                var offset = RAYS[index];\n                var j = i + offset;\n\n                var blocked = false;\n                while (j !== square) {\n                    if (_board[j] != null) {\n                        blocked = true;break;\n                    }\n                    j += offset;\n                }\n\n                if (!blocked) return true;\n            }\n        }\n\n        return false;\n    }\n\n    function king_attacked(color) {\n        return attacked(swap_color(color), kings[color]);\n    }\n\n    function _in_check() {\n        return king_attacked(_turn);\n    }\n\n    function _in_checkmate() {\n        return _in_check() && generate_moves().length === 0;\n    }\n\n    function _in_stalemate() {\n        return !_in_check() && generate_moves().length === 0;\n    }\n\n    function _insufficient_material() {\n        var pieces = {};\n        var bishops = [];\n        var num_pieces = 0;\n        var sq_color = 0;\n\n        for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n            sq_color = (sq_color + 1) % 2;\n            if (i & 0x88) {\n                i += 7;continue;\n            }\n\n            var piece = _board[i];\n            if (piece) {\n                pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n                if (piece.type === BISHOP) {\n                    bishops.push(sq_color);\n                }\n                num_pieces++;\n            }\n        }\n\n        /* k vs. k */\n        if (num_pieces === 2) {\n            return true;\n        }\n\n        /* k vs. kn .... or .... k vs. kb */\n        else if (num_pieces === 3 && (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {\n                return true;\n            }\n\n            /* kb vs. kb where any number of bishops are all on the same color */\n            else if (num_pieces === pieces[BISHOP] + 2) {\n                    var sum = 0;\n                    var len = bishops.length;\n                    for (var i = 0; i < len; i++) {\n                        sum += bishops[i];\n                    }\n                    if (sum === 0 || sum === len) {\n                        return true;\n                    }\n                }\n\n        return false;\n    }\n\n    function _in_threefold_repetition() {\n        /* TODO: while this function is fine for casual use, a better\n         * implementation would use a Zobrist key (instead of FEN). the\n         * Zobrist key would be maintained in the make_move/undo_move functions,\n         * avoiding the costly that we do below.\n         */\n        var moves = [];\n        var positions = {};\n        var repetition = false;\n\n        while (true) {\n            var move = undo_move();\n            if (!move) break;\n            moves.push(move);\n        }\n\n        while (true) {\n            /* remove the last two fields in the FEN string, they're not needed\n             * when checking for draw by rep */\n            var fen = generate_fen().split(' ').slice(0, 4).join(' ');\n\n            /* has the position occurred three or move times */\n            positions[fen] = fen in positions ? positions[fen] + 1 : 1;\n            if (positions[fen] >= 3) {\n                repetition = true;\n            }\n\n            if (!moves.length) {\n                break;\n            }\n            make_move(moves.pop());\n        }\n\n        return repetition;\n    }\n\n    function push(move) {\n        _history.push({\n            move: move,\n            kings: { b: kings.b, w: kings.w },\n            turn: _turn,\n            castling: { b: castling.b, w: castling.w },\n            ep_square: ep_square,\n            half_moves: half_moves,\n            move_number: move_number\n        });\n    }\n\n    function make_move(move) {\n        var us = _turn;\n        var them = swap_color(us);\n        push(move);\n\n        _board[move.to] = _board[move.from];\n        _board[move.from] = null;\n\n        /* if ep capture, remove the captured pawn */\n        if (move.flags & BITS.EP_CAPTURE) {\n            if (_turn === BLACK) {\n                _board[move.to - 16] = null;\n            } else {\n                _board[move.to + 16] = null;\n            }\n        }\n\n        /* if pawn promotion, replace with new piece */\n        if (move.flags & BITS.PROMOTION) {\n            _board[move.to] = { type: move.promotion, color: us };\n        }\n\n        /* if we moved the king */\n        if (_board[move.to].type === KING) {\n            kings[_board[move.to].color] = move.to;\n\n            /* if we castled, move the rook next to the king */\n            if (move.flags & BITS.KSIDE_CASTLE) {\n                var castling_to = move.to - 1;\n                var castling_from = move.to + 1;\n                _board[castling_to] = _board[castling_from];\n                _board[castling_from] = null;\n            } else if (move.flags & BITS.QSIDE_CASTLE) {\n                var castling_to = move.to + 1;\n                var castling_from = move.to - 2;\n                _board[castling_to] = _board[castling_from];\n                _board[castling_from] = null;\n            }\n\n            /* turn off castling */\n            castling[us] = '';\n        }\n\n        /* turn off castling if we move a rook */\n        if (castling[us]) {\n            for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n                if (move.from === ROOKS[us][i].square && castling[us] & ROOKS[us][i].flag) {\n                    castling[us] ^= ROOKS[us][i].flag;\n                    break;\n                }\n            }\n        }\n\n        /* turn off castling if we capture a rook */\n        if (castling[them]) {\n            for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n                if (move.to === ROOKS[them][i].square && castling[them] & ROOKS[them][i].flag) {\n                    castling[them] ^= ROOKS[them][i].flag;\n                    break;\n                }\n            }\n        }\n\n        /* if big pawn move, update the en passant square */\n        if (move.flags & BITS.BIG_PAWN) {\n            if (_turn === 'b') {\n                ep_square = move.to - 16;\n            } else {\n                ep_square = move.to + 16;\n            }\n        } else {\n            ep_square = EMPTY;\n        }\n\n        /* reset the 50 move counter if a pawn is moved or a piece is captured */\n        if (move.piece === PAWN) {\n            half_moves = 0;\n        } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n            half_moves = 0;\n        } else {\n            half_moves++;\n        }\n\n        if (_turn === BLACK) {\n            move_number++;\n        }\n        _turn = swap_color(_turn);\n    }\n\n    function undo_move() {\n        var old = _history.pop();\n        if (old == null) {\n            return null;\n        }\n\n        var move = old.move;\n        kings = old.kings;\n        _turn = old.turn;\n        castling = old.castling;\n        ep_square = old.ep_square;\n        half_moves = old.half_moves;\n        move_number = old.move_number;\n\n        var us = _turn;\n        var them = swap_color(_turn);\n\n        _board[move.from] = _board[move.to];\n        _board[move.from].type = move.piece; // to undo any promotions\n        _board[move.to] = null;\n\n        if (move.flags & BITS.CAPTURE) {\n            _board[move.to] = { type: move.captured, color: them };\n        } else if (move.flags & BITS.EP_CAPTURE) {\n            var index;\n            if (us === BLACK) {\n                index = move.to - 16;\n            } else {\n                index = move.to + 16;\n            }\n            _board[index] = { type: PAWN, color: them };\n        }\n\n        if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n            var castling_to, castling_from;\n            if (move.flags & BITS.KSIDE_CASTLE) {\n                castling_to = move.to + 1;\n                castling_from = move.to - 1;\n            } else if (move.flags & BITS.QSIDE_CASTLE) {\n                castling_to = move.to - 2;\n                castling_from = move.to + 1;\n            }\n\n            _board[castling_to] = _board[castling_from];\n            _board[castling_from] = null;\n        }\n\n        return move;\n    }\n\n    /* this function is used to uniquely identify ambiguous moves */\n    function get_disambiguator(move, sloppy) {\n        var moves = generate_moves({ legal: !sloppy });\n\n        var from = move.from;\n        var to = move.to;\n        var piece = move.piece;\n\n        var ambiguities = 0;\n        var same_rank = 0;\n        var same_file = 0;\n\n        for (var i = 0, len = moves.length; i < len; i++) {\n            var ambig_from = moves[i].from;\n            var ambig_to = moves[i].to;\n            var ambig_piece = moves[i].piece;\n\n            /* if a move of the same piece type ends on the same to square, we'll\n             * need to add a disambiguator to the algebraic notation\n             */\n            if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n                ambiguities++;\n\n                if (rank(from) === rank(ambig_from)) {\n                    same_rank++;\n                }\n\n                if (file(from) === file(ambig_from)) {\n                    same_file++;\n                }\n            }\n        }\n\n        if (ambiguities > 0) {\n            /* if there exists a similar moving piece on the same rank and file as\n             * the move in question, use the square as the disambiguator\n             */\n            if (same_rank > 0 && same_file > 0) {\n                return algebraic(from);\n            }\n            /* if the moving piece rests on the same file, use the rank symbol as the\n             * disambiguator\n             */\n            else if (same_file > 0) {\n                    return algebraic(from).charAt(1);\n                }\n                /* else use the file symbol */\n                else {\n                        return algebraic(from).charAt(0);\n                    }\n        }\n\n        return '';\n    }\n\n    function _ascii() {\n        var s = '   +------------------------+\\n';\n        for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n            /* display the rank */\n            if (file(i) === 0) {\n                s += ' ' + '87654321'[rank(i)] + ' |';\n            }\n\n            /* empty piece */\n            if (_board[i] == null) {\n                s += ' . ';\n            } else {\n                var piece = _board[i].type;\n                var color = _board[i].color;\n                var symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n                s += ' ' + symbol + ' ';\n            }\n\n            if (i + 1 & 0x88) {\n                s += '|\\n';\n                i += 8;\n            }\n        }\n        s += '   +------------------------+\\n';\n        s += '     a  b  c  d  e  f  g  h\\n';\n\n        return s;\n    }\n\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n    function move_from_san(move, sloppy) {\n        // strip off any move decorations: e.g Nf3+?!\n        var clean_move = stripped_san(move);\n\n        // if we're using the sloppy parser run a regex to grab piece, to, and from\n        // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\n        if (sloppy) {\n            var matches = clean_move.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\n            if (matches) {\n                var piece = matches[1];\n                var from = matches[2];\n                var to = matches[3];\n                var promotion = matches[4];\n            }\n        }\n\n        var moves = generate_moves();\n        for (var i = 0, len = moves.length; i < len; i++) {\n            // try the strict parser first, then the sloppy parser if requested\n            // by the user\n            if (clean_move === stripped_san(move_to_san(moves[i])) || sloppy && clean_move === stripped_san(move_to_san(moves[i], true))) {\n                return moves[i];\n            } else {\n                if (matches && (!piece || piece.toLowerCase() == moves[i].piece) && SQUARES[from] == moves[i].from && SQUARES[to] == moves[i].to && (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n                    return moves[i];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /*****************************************************************************\n     * UTILITY FUNCTIONS\n     ****************************************************************************/\n    function rank(i) {\n        return i >> 4;\n    }\n\n    function file(i) {\n        return i & 15;\n    }\n\n    function algebraic(i) {\n        var f = file(i),\n            r = rank(i);\n        return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1);\n    }\n\n    function swap_color(c) {\n        return c === WHITE ? BLACK : WHITE;\n    }\n\n    function is_digit(c) {\n        return '0123456789'.indexOf(c) !== -1;\n    }\n\n    /* pretty = external move object */\n    function make_pretty(ugly_move) {\n        var move = clone(ugly_move);\n        move.san = move_to_san(move, false);\n        move.to = algebraic(move.to);\n        move.from = algebraic(move.from);\n\n        var flags = '';\n\n        for (var flag in BITS) {\n            if (BITS[flag] & move.flags) {\n                flags += FLAGS[flag];\n            }\n        }\n        move.flags = flags;\n\n        return move;\n    }\n\n    function clone(obj) {\n        var dupe = obj instanceof Array ? [] : {};\n\n        for (var property in obj) {\n            if ((typeof property === 'undefined' ? 'undefined' : _typeof(property)) === 'object') {\n                dupe[property] = clone(obj[property]);\n            } else {\n                dupe[property] = obj[property];\n            }\n        }\n\n        return dupe;\n    }\n\n    function trim(str) {\n        return str.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /*****************************************************************************\n     * DEBUGGING UTILITIES\n     ****************************************************************************/\n    function _perft(depth) {\n        var moves = generate_moves({ legal: false });\n        var nodes = 0;\n        var color = _turn;\n\n        for (var i = 0, len = moves.length; i < len; i++) {\n            make_move(moves[i]);\n            if (!king_attacked(color)) {\n                if (depth - 1 > 0) {\n                    var child_nodes = _perft(depth - 1);\n                    nodes += child_nodes;\n                } else {\n                    nodes++;\n                }\n            }\n            undo_move();\n        }\n\n        return nodes;\n    }\n\n    return {\n        /***************************************************************************\n         * PUBLIC CONSTANTS (is there a better way to do this?)\n         **************************************************************************/\n        WHITE: WHITE,\n        BLACK: BLACK,\n        PAWN: PAWN,\n        KNIGHT: KNIGHT,\n        BISHOP: BISHOP,\n        ROOK: ROOK,\n        QUEEN: QUEEN,\n        KING: KING,\n        SQUARES: function () {\n            /* from the ECMA-262 spec (section 12.6.4):\n             * \"The mechanics of enumerating the properties ... is\n             * implementation dependent\"\n             * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n             * ordered correctly\n             */\n            var keys = [];\n            for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n                if (i & 0x88) {\n                    i += 7;continue;\n                }\n                keys.push(algebraic(i));\n            }\n            return keys;\n        }(),\n        FLAGS: FLAGS,\n\n        /***************************************************************************\n         * PUBLIC API\n         **************************************************************************/\n        load: function load(fen) {\n            return _load(fen);\n        },\n\n        reset: function reset() {\n            return _reset();\n        },\n\n        moves: function moves(options) {\n            /* The internal representation of a chess move is in 0x88 format, and\n             * not meant to be human-readable.  The code below converts the 0x88\n             * square coordinates to algebraic coordinates.  It also prunes an\n             * unnecessary move keys resulting from a verbose call.\n             */\n\n            var ugly_moves = generate_moves(options);\n            var moves = [];\n\n            for (var i = 0, len = ugly_moves.length; i < len; i++) {\n\n                /* does the user want a full move object (most likely not), or just\n                 * SAN\n                 */\n                if (typeof options !== 'undefined' && 'verbose' in options && options.verbose) {\n                    moves.push(make_pretty(ugly_moves[i]));\n                } else {\n                    moves.push(move_to_san(ugly_moves[i], false));\n                }\n            }\n\n            return moves;\n        },\n\n        ugly_moves: function ugly_moves(options) {\n            var ugly_moves = generate_moves(options);\n            return ugly_moves;\n        },\n\n        in_check: function in_check() {\n            return _in_check();\n        },\n\n        in_checkmate: function in_checkmate() {\n            return _in_checkmate();\n        },\n\n        in_stalemate: function in_stalemate() {\n            return _in_stalemate();\n        },\n\n        in_draw: function in_draw() {\n            return half_moves >= 100 || _in_stalemate() || _insufficient_material() || _in_threefold_repetition();\n        },\n\n        insufficient_material: function insufficient_material() {\n            return _insufficient_material();\n        },\n\n        in_threefold_repetition: function in_threefold_repetition() {\n            return _in_threefold_repetition();\n        },\n\n        game_over: function game_over() {\n            return half_moves >= 100 || _in_checkmate() || _in_stalemate() || _insufficient_material() || _in_threefold_repetition();\n        },\n\n        validate_fen: function validate_fen(fen) {\n            return _validate_fen(fen);\n        },\n\n        fen: function fen() {\n            return generate_fen();\n        },\n\n        board: function board() {\n            var output = [],\n                row = [];\n\n            for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n                if (_board[i] == null) {\n                    row.push(null);\n                } else {\n                    row.push({ type: _board[i].type, color: _board[i].color });\n                }\n                if (i + 1 & 0x88) {\n                    output.push(row);\n                    row = [];\n                    i += 8;\n                }\n            }\n\n            return output;\n        },\n\n        pgn: function pgn(options) {\n            /* using the specification from http://www.chessclub.com/help/PGN-spec\n             * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n             */\n            var newline = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.newline_char === 'string' ? options.newline_char : '\\n';\n            var max_width = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.max_width === 'number' ? options.max_width : 0;\n            var result = [];\n            var header_exists = false;\n\n            /* add the PGN header headerrmation */\n            for (var i in header) {\n                /* TODO: order of enumerated properties in header object is not\n                 * guaranteed, see ECMA-262 spec (section 12.6.4)\n                 */\n                result.push('[' + i + ' \\\"' + header[i] + '\\\"]' + newline);\n                header_exists = true;\n            }\n\n            if (header_exists && _history.length) {\n                result.push(newline);\n            }\n\n            /* pop all of history onto reversed_history */\n            var reversed_history = [];\n            while (_history.length > 0) {\n                reversed_history.push(undo_move());\n            }\n\n            var moves = [];\n            var move_string = '';\n\n            /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n            while (reversed_history.length > 0) {\n                var move = reversed_history.pop();\n\n                /* if the position started with black to move, start PGN with 1. ... */\n                if (!_history.length && move.color === 'b') {\n                    move_string = move_number + '. ...';\n                } else if (move.color === 'w') {\n                    /* store the previous generated move_string if we have one */\n                    if (move_string.length) {\n                        moves.push(move_string);\n                    }\n                    move_string = move_number + '.';\n                }\n\n                move_string = move_string + ' ' + move_to_san(move, false);\n                make_move(move);\n            }\n\n            /* are there any other leftover moves? */\n            if (move_string.length) {\n                moves.push(move_string);\n            }\n\n            /* is there a result? */\n            if (typeof header.Result !== 'undefined') {\n                moves.push(header.Result);\n            }\n\n            /* history should be back to what is was before we started generating PGN,\n             * so join together moves\n             */\n            if (max_width === 0) {\n                return result.join('') + moves.join(' ');\n            }\n\n            /* wrap the PGN output at max_width */\n            var current_width = 0;\n            for (var i = 0; i < moves.length; i++) {\n                /* if the current move will push past max_width */\n                if (current_width + moves[i].length > max_width && i !== 0) {\n\n                    /* don't end the line with whitespace */\n                    if (result[result.length - 1] === ' ') {\n                        result.pop();\n                    }\n\n                    result.push(newline);\n                    current_width = 0;\n                } else if (i !== 0) {\n                    result.push(' ');\n                    current_width++;\n                }\n                result.push(moves[i]);\n                current_width += moves[i].length;\n            }\n\n            return result.join('');\n        },\n\n        load_pgn: function load_pgn(pgn, options) {\n            // allow the user to specify the sloppy move parser to work around over\n            // disambiguation bugs in Fritz and Chessbase\n            var sloppy = typeof options !== 'undefined' && 'sloppy' in options ? options.sloppy : false;\n\n            function mask(str) {\n                return str.replace(/\\\\/g, '\\\\');\n            }\n\n            function has_keys(object) {\n                for (var key in object) {\n                    return true;\n                }\n                return false;\n            }\n\n            function parse_pgn_header(header, options) {\n                var newline_char = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.newline_char === 'string' ? options.newline_char : '\\r?\\n';\n                var header_obj = {};\n                var headers = header.split(new RegExp(mask(newline_char)));\n                var key = '';\n                var value = '';\n\n                for (var i = 0; i < headers.length; i++) {\n                    key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1');\n                    value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\]$/, '$1');\n                    if (trim(key).length > 0) {\n                        header_obj[key] = value;\n                    }\n                }\n\n                return header_obj;\n            }\n\n            var newline_char = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.newline_char === 'string' ? options.newline_char : '\\r?\\n';\n            var regex = new RegExp('^(\\\\[(.|' + mask(newline_char) + ')*\\\\])' + '(' + mask(newline_char) + ')*' + '1.(' + mask(newline_char) + '|.)*$', 'g');\n\n            /* get header part of the PGN file */\n            var header_string = pgn.replace(regex, '$1');\n\n            /* no info part given, begins with moves */\n            if (header_string[0] !== '[') {\n                header_string = '';\n            }\n\n            _reset();\n\n            /* parse PGN header */\n            var headers = parse_pgn_header(header_string, options);\n            for (var key in headers) {\n                set_header([key, headers[key]]);\n            }\n\n            /* load the starting position indicated by [Setup '1'] and\n             * [FEN position] */\n            if (headers['SetUp'] === '1') {\n                if (!('FEN' in headers && _load(headers['FEN']))) {\n                    return false;\n                }\n            }\n\n            /* delete header to get the moves */\n            var ms = pgn.replace(header_string, '').replace(new RegExp(mask(newline_char), 'g'), ' ');\n\n            /* delete comments */\n            ms = ms.replace(/(\\{[^}]+\\})+?/g, '');\n\n            /* delete recursive annotation variations */\n            var rav_regex = /(\\([^\\(\\)]+\\))+?/g;\n            while (rav_regex.test(ms)) {\n                ms = ms.replace(rav_regex, '');\n            }\n\n            /* delete move numbers */\n            ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\n\n            /* delete ... indicating black to move */\n            ms = ms.replace(/\\.\\.\\./g, '');\n\n            /* delete numeric annotation glyphs */\n            ms = ms.replace(/\\$\\d+/g, '');\n\n            /* trim and get array of moves */\n            var moves = trim(ms).split(new RegExp(/\\s+/));\n\n            /* delete empty entries */\n            moves = moves.join(',').replace(/,,+/g, ',').split(',');\n            var move = '';\n\n            for (var half_move = 0; half_move < moves.length - 1; half_move++) {\n                move = move_from_san(moves[half_move], sloppy);\n\n                /* move not possible! (don't clear the board to examine to show the\n                 * latest valid position)\n                 */\n                if (move == null) {\n                    return false;\n                } else {\n                    make_move(move);\n                }\n            }\n\n            /* examine last move */\n            move = moves[moves.length - 1];\n            if (POSSIBLE_RESULTS.indexOf(move) > -1) {\n                if (has_keys(header) && typeof header.Result === 'undefined') {\n                    set_header(['Result', move]);\n                }\n            } else {\n                move = move_from_san(move, sloppy);\n                if (move == null) {\n                    return false;\n                } else {\n                    make_move(move);\n                }\n            }\n            return true;\n        },\n\n        header: function header() {\n            return set_header(arguments);\n        },\n\n        ascii: function ascii() {\n            return _ascii();\n        },\n\n        turn: function turn() {\n            return _turn;\n        },\n\n        move: function move(_move, options) {\n            /* The move function can be called with in the following parameters:\n             *\n             * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n             *\n             * .move({ from: 'h7', <- where the 'move' is a move object (additional\n             *         to :'h8',      fields are ignored)\n             *         promotion: 'q',\n             *      })\n             */\n\n            // allow the user to specify the sloppy move parser to work around over\n            // disambiguation bugs in Fritz and Chessbase\n            var sloppy = typeof options !== 'undefined' && 'sloppy' in options ? options.sloppy : false;\n\n            var move_obj = null;\n\n            if (typeof _move === 'string') {\n                move_obj = move_from_san(_move, sloppy);\n            } else if ((typeof _move === 'undefined' ? 'undefined' : _typeof(_move)) === 'object') {\n                var moves = generate_moves();\n\n                /* convert the pretty move object to an ugly move object */\n                for (var i = 0, len = moves.length; i < len; i++) {\n                    if (_move.from === algebraic(moves[i].from) && _move.to === algebraic(moves[i].to) && (!('promotion' in moves[i]) || _move.promotion === moves[i].promotion)) {\n                        move_obj = moves[i];\n                        break;\n                    }\n                }\n            }\n\n            /* failed to find move */\n            if (!move_obj) {\n                return null;\n            }\n\n            /* need to make a copy of move because we can't generate SAN after the\n             * move is made\n             */\n            var pretty_move = make_pretty(move_obj);\n\n            make_move(move_obj);\n\n            return pretty_move;\n        },\n\n        ugly_move: function ugly_move(move_obj, options) {\n            var pretty_move = make_pretty(move_obj);\n            make_move(move_obj);\n\n            return pretty_move;\n        },\n\n        undo: function undo() {\n            var move = undo_move();\n            return move ? make_pretty(move) : null;\n        },\n\n        clear: function clear() {\n            return _clear();\n        },\n\n        put: function put(piece, square) {\n            return _put(piece, square);\n        },\n\n        get: function get(square) {\n            return _get(square);\n        },\n\n        remove: function remove(square) {\n            return _remove(square);\n        },\n\n        perft: function perft(depth) {\n            return _perft(depth);\n        },\n\n        square_color: function square_color(square) {\n            if (square in SQUARES) {\n                var sq_0x88 = SQUARES[square];\n                return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark';\n            }\n\n            return null;\n        },\n\n        history: function history(options) {\n            var reversed_history = [];\n            var move_history = [];\n            var verbose = typeof options !== 'undefined' && 'verbose' in options && options.verbose;\n\n            while (_history.length > 0) {\n                reversed_history.push(undo_move());\n            }\n\n            while (reversed_history.length > 0) {\n                var move = reversed_history.pop();\n                if (verbose) {\n                    move_history.push(make_pretty(move));\n                } else {\n                    move_history.push(move_to_san(move));\n                }\n                make_move(move);\n            }\n\n            return move_history;\n        }\n\n    };\n};\n\n/* export Chess object if using node or any other CommonJS compatible\n * environment */\nif (true) exports.Chess = Chess;\n/* export Chess object for any RequireJS compatible environment */\nif (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    return Chess;\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar VALUE = {\n  p: 100,\n  r: 500,\n  n: 300,\n  b: 300,\n  q: 1000,\n  k: 99999\n};\n\n/*\n * Alpha Beta search\n * White is always the maximizing player\n *   and black is always the minimizing player\n *\n */\n\nvar positionsGenerated = 0;\n\nvar alphaBetaSearch = exports.alphaBetaSearch = function alphaBetaSearch(game, depth) {\n  var bestMoveFound = void 0;\n  var isMaximizingPlayer = game.turn() === 'w';\n  var possibleMoves = getMoveOrder(game);\n  positionsGenerated = 0;\n\n  if (isMaximizingPlayer) {\n    var bestMoveValue = -Infinity;\n    for (var i = 0; i < possibleMoves.length; i += 1) {\n      positionsGenerated += 1;\n      var nextMove = possibleMoves[i];\n      game.ugly_move(nextMove);\n      var v = minValue(game, depth - 1, -Infinity, Infinity);\n      game.undo();\n      if (v > bestMoveValue) {\n        bestMoveValue = v;\n        bestMoveFound = nextMove;\n      }\n    }\n  } else {\n    var _bestMoveValue = Infinity;\n    for (var _i = 0; _i < possibleMoves.length; _i += 1) {\n      positionsGenerated += 1;\n      var _nextMove = possibleMoves[_i];\n      game.ugly_move(_nextMove);\n      var _v = maxValue(game, depth - 1, -Infinity, Infinity);\n      game.undo();\n      if (_v < _bestMoveValue) {\n        _bestMoveValue = _v;\n        bestMoveFound = _nextMove;\n      }\n    }\n  }\n  return { move: bestMoveFound, positionsGenerated: positionsGenerated };\n};\n\nvar maxValue = function maxValue(game, depth, alpha, beta) {\n  if (cutoffTest(game, depth)) return evaluateState(game);\n  var bestValue = -Infinity;\n  var possibleMoves = getMoveOrder(game);\n  for (var i = 0; i < possibleMoves.length; i += 1) {\n    positionsGenerated += 1;\n    game.ugly_move(possibleMoves[i]);\n    var nextMin = minValue(game, depth - 1, alpha, beta);\n    bestValue = Math.max(bestValue, nextMin);\n    game.undo();\n    if (bestValue >= beta) {\n      return bestValue;\n    }\n    alpha = Math.max(alpha, bestValue);\n  }\n  return bestValue;\n};\n\nvar minValue = function minValue(game, depth, alpha, beta) {\n  if (cutoffTest(game, depth)) return evaluateState(game);\n  var bestValue = Infinity;\n  var possibleMoves = getMoveOrder(game);\n  for (var i = 0; i < possibleMoves.length; i += 1) {\n    positionsGenerated += 1;\n    game.ugly_move(possibleMoves[i]);\n    var nextMax = maxValue(game, depth - 1, alpha, beta);\n    bestValue = Math.min(bestValue, nextMax);\n    game.undo();\n    if (bestValue <= alpha) {\n      return bestValue;\n    }\n    beta = Math.min(beta, bestValue);\n  }\n  return bestValue;\n};\n\nvar cutoffTest = function cutoffTest(game, depth) {\n  if (depth === 0) return true;\n  return false;\n};\n\nvar evaluateState = function evaluateState(game) {\n  return countMaterial(game.board());\n};\n\nvar getMoveOrder = function getMoveOrder(game) {\n  return game.ugly_moves();\n};\n\nvar countMaterial = exports.countMaterial = function countMaterial(board) {\n  var value = board.reduce(function (acc, val, index, array) {\n    return acc + val.reduce(function (acc, val, index, array) {\n      if (val === null) return acc;\n      var owner = val.color === 'w' ? 1 : -1;\n      var cost = owner * VALUE[val.type];\n      return acc + cost;\n    }, 0);\n  }, 0);\n  return value;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alphaBetaSearch = undefined;\n\nvar _boardEval = __webpack_require__(0);\n\nvar positionsGenerated = 0; /*\n                             * Alpha Beta search\n                             * White is always the maximizing player\n                             *   and black is always the minimizing player\n                             *\n                             */\n\nvar Transpositions = {};\nvar pv = []; // pv is the principle variation i.e. the best line.\nvar initialHistory = [];\n\nvar alphaBetaSearch = exports.alphaBetaSearch = function alphaBetaSearch(game, maxDepth) {\n  var bestMoveFound = void 0;\n  var isMaximizingPlayer = game.turn() === 'w';\n  var possibleMoves = getMoveOrder(game);\n  pv = [];\n  pv.a = -Infinity;\n  pv.b = Infinity;\n  positionsGenerated = 0;\n  initialHistory = game.history();\n  Transpositions = {};\n\n  for (var depth = 1; depth <= maxDepth; depth++) {\n    if (isMaximizingPlayer) {\n      var bestMoveValue = -Infinity;\n      for (var i = 0; i < possibleMoves.length; i += 1) {\n        positionsGenerated += 1;\n        var nextMove = possibleMoves[i];\n        game.ugly_move(nextMove);\n        var v = minValue(game, depth - 1, -Infinity, Infinity);\n        game.undo();\n        if (v >= bestMoveValue) {\n          bestMoveValue = v;\n          bestMoveFound = nextMove;\n        }\n      }\n    } else {\n      var _bestMoveValue = Infinity;\n      for (var _i = 0; _i < possibleMoves.length; _i += 1) {\n        positionsGenerated += 1;\n        var _nextMove = possibleMoves[_i];\n        game.ugly_move(_nextMove);\n        var _v = maxValue(game, depth - 1, -Infinity, Infinity);\n        game.undo();\n        if (_v <= _bestMoveValue) {\n          _bestMoveValue = _v;\n          bestMoveFound = _nextMove;\n        }\n      }\n    }\n  }\n  return { move: bestMoveFound, positionsGenerated: positionsGenerated };\n};\n\nvar maxValue = function maxValue(game, depth, a, b) {\n  if (cutoffTest(game, depth)) return evaluateState(game);\n  var bestValue = -Infinity;\n  var possibleMoves = getMoveOrder(game);\n  for (var i = 0; i < possibleMoves.length; i += 1) {\n    positionsGenerated += 1;\n    game.ugly_move(possibleMoves[i]);\n\n    var _checkTranspositions = checkTranspositions(game, a, b),\n        alpha = _checkTranspositions.alpha,\n        beta = _checkTranspositions.beta;\n\n    var nextMin = minValue(game, depth - 1, alpha, beta);\n    bestValue = Math.max(bestValue, nextMin);\n    game.undo();\n    if (bestValue >= beta) {\n      return bestValue;\n    }\n    if (bestValue > alpha) {\n      a = bestValue;\n      setTransposition(game, alpha, beta);\n    }\n  }\n  return bestValue;\n};\n\nvar minValue = function minValue(game, depth, a, b) {\n  if (cutoffTest(game, depth)) return evaluateState(game);\n  var bestValue = Infinity;\n  var possibleMoves = getMoveOrder(game);\n  for (var i = 0; i < possibleMoves.length; i += 1) {\n    positionsGenerated += 1;\n    game.ugly_move(possibleMoves[i]);\n\n    var _checkTranspositions2 = checkTranspositions(game, a, b),\n        alpha = _checkTranspositions2.alpha,\n        beta = _checkTranspositions2.beta;\n\n    var nextMax = maxValue(game, depth - 1, alpha, beta);\n    bestValue = Math.min(bestValue, nextMax);\n    game.undo();\n    if (bestValue <= alpha) {\n      return bestValue;\n    }\n    if (bestValue < beta) {\n      b = bestValue;\n      setTransposition(game, alpha, beta);\n    }\n  }\n  return bestValue;\n};\n\nvar cutoffTest = function cutoffTest(game, depth) {\n  if (depth === 0) return true;\n  if (game.game_over()) return true;\n  return false;\n};\n\nvar evaluateState = function evaluateState(game) {\n  return (0, _boardEval.countMaterial)(game.board());\n};\n\nvar getPosition = function getPosition(game) {\n  return game.fen().split(' ')[0];\n};\n\nvar checkTranspositions = function checkTranspositions(game, alpha, beta) {\n  var t = Transpositions[getPosition(game)];\n  return t || { alpha: alpha, beta: beta };\n};\n\nvar setTransposition = function setTransposition(game, alpha, beta) {\n  var trans = Transpositions[getPosition(game)];\n  if (trans) {\n    Transpositions[getPosition(game)] = { alpha: Math.max(alpha, trans.alpha),\n      beta: Math.min(beta, trans.beta) };\n  } else {\n    Transpositions[getPosition(game)] = { alpha: alpha, beta: beta };\n  }\n};\n\nvar getMoveOrder = function getMoveOrder(game) {\n  var moves = game.ugly_moves().sort(function (a, b) {\n    return a.flags === 2 && b.flags !== 2 ? -1 : 1;\n  });\n  return moves;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar VALUE = {\n  p: 100,\n  r: 500,\n  n: 300,\n  b: 300,\n  q: 1000,\n  k: 99999\n};\n\n/*\n * Alpha Beta search\n * White is always the maximizing player\n *   and black is always the minimizing player\n *\n */\n\nvar positionsGenerated = 0;\n\nvar alphaBetaSearch = exports.alphaBetaSearch = function alphaBetaSearch(game, depth) {\n  var bestMoveFound = void 0;\n  var isMaximizingPlayer = game.turn() === 'w';\n  var possibleMoves = getMoveOrder(game);\n  positionsGenerated = 0;\n\n  if (isMaximizingPlayer) {\n    var bestMoveValue = -Infinity;\n    for (var i = 0; i < possibleMoves.length; i += 1) {\n      positionsGenerated += 1;\n      var nextMove = possibleMoves[i];\n      game.ugly_move(nextMove);\n      var v = minValue(game, depth - 1, -Infinity, Infinity);\n      game.undo();\n      if (v > bestMoveValue) {\n        bestMoveValue = v;\n        bestMoveFound = nextMove;\n      }\n    }\n  } else {\n    var _bestMoveValue = Infinity;\n    for (var _i = 0; _i < possibleMoves.length; _i += 1) {\n      positionsGenerated += 1;\n      var _nextMove = possibleMoves[_i];\n      game.ugly_move(_nextMove);\n      var _v = maxValue(game, depth - 1, -Infinity, Infinity);\n      game.undo();\n      if (_v < _bestMoveValue) {\n        _bestMoveValue = _v;\n        bestMoveFound = _nextMove;\n      }\n    }\n  }\n  return { move: bestMoveFound, positionsGenerated: positionsGenerated };\n};\n\nvar maxValue = function maxValue(game, depth, alpha, beta) {\n  if (cutoffTest(game, depth)) return evaluateState(game);\n  var bestValue = -Infinity;\n  var possibleMoves = getMoveOrder(game);\n  for (var i = 0; i < possibleMoves.length; i += 1) {\n    positionsGenerated += 1;\n    game.ugly_move(possibleMoves[i]);\n    var nextMin = minValue(game, depth - 1, alpha, beta);\n    bestValue = Math.max(bestValue, nextMin);\n    game.undo();\n    if (bestValue >= beta) {\n      return bestValue;\n    }\n    alpha = Math.max(alpha, bestValue);\n  }\n  return bestValue;\n};\n\nvar minValue = function minValue(game, depth, alpha, beta) {\n  if (cutoffTest(game, depth)) return evaluateState(game);\n  var bestValue = Infinity;\n  var possibleMoves = getMoveOrder(game);\n  for (var i = 0; i < possibleMoves.length; i += 1) {\n    positionsGenerated += 1;\n    game.ugly_move(possibleMoves[i]);\n    var nextMax = maxValue(game, depth - 1, alpha, beta);\n    bestValue = Math.min(bestValue, nextMax);\n    game.undo();\n    if (bestValue <= alpha) {\n      return bestValue;\n    }\n    beta = Math.min(beta, bestValue);\n  }\n  return bestValue;\n};\n\nvar cutoffTest = function cutoffTest(game, depth) {\n  if (depth === 0) return true;\n  return false;\n};\n\nvar evaluateState = function evaluateState(game) {\n  return countMaterial(game.board());\n};\n\nvar getMoveOrder = function getMoveOrder(game) {\n  var moves = game.ugly_moves().sort(function (a, b) {\n    return a.flags === 2 && b.flags !== 2 ? -1 : 1;\n  });\n  return moves;\n};\n\nvar countMaterial = exports.countMaterial = function countMaterial(board) {\n  var value = board.reduce(function (acc, val, index, array) {\n    return acc + val.reduce(function (acc, val, index, array) {\n      if (val === null) return acc;\n      var owner = val.color === 'w' ? 1 : -1;\n      var cost = owner * VALUE[val.type];\n      return acc + cost;\n    }, 0);\n  }, 0);\n  return value;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _game = __webpack_require__(1);\n\nvar _game2 = _interopRequireDefault(_game);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar game = (0, _game2.default)();//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJnYW1lIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7QUFFQSxJQUFNQSxPQUFPLHFCQUFiIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2FtZSBmcm9tICcuL2dhbWUnO1xuXG5jb25zdCBnYW1lID0gR2FtZSgpO1xuXG5cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.minimaxSearch = undefined;\n\nvar _boardEval = __webpack_require__(0);\n\nvar positionsGenerated = 0; /*\n                             * Minimax search\n                             * White is always the maximizing player\n                             *   and black is always the minimizing player\n                             *\n                             */\nvar minimaxSearch = exports.minimaxSearch = function minimaxSearch(game, depth) {\n  var bestMoveFound = void 0;\n  var isMaximizingPlayer = game.turn() === 'w';\n  var possibleMoves = getMoveOrder(game);\n  positionsGenerated = 0;\n\n  if (isMaximizingPlayer) {\n    var bestMoveValue = -Infinity;\n    for (var i = 0; i < possibleMoves.length; i += 1) {\n      positionsGenerated += 1;\n      var nextMove = possibleMoves[i];\n      game.ugly_move(nextMove);\n      var v = minValue(game, depth - 1);\n      game.undo();\n      if (v >= bestMoveValue) {\n        bestMoveValue = v;\n        bestMoveFound = nextMove;\n      }\n    }\n  } else {\n    var _bestMoveValue = Infinity;\n    for (var _i = 0; _i < possibleMoves.length; _i += 1) {\n      positionsGenerated += 1;\n      var _nextMove = possibleMoves[_i];\n      game.ugly_move(_nextMove);\n      var _v = maxValue(game, depth - 1);\n      game.undo();\n      if (_v <= _bestMoveValue) {\n        _bestMoveValue = _v;\n        bestMoveFound = _nextMove;\n      }\n    }\n  }\n  return { move: bestMoveFound, positionsGenerated: positionsGenerated };\n};\n\nvar maxValue = function maxValue(game, depth) {\n  if (cutoffTest(game, depth)) return evaluateState(game);\n  var bestValue = -Infinity;\n  var possibleMoves = getMoveOrder(game);\n  for (var i = 0; i < possibleMoves.length; i += 1) {\n    positionsGenerated += 1;\n    game.ugly_move(possibleMoves[i]);\n    var nextMin = minValue(game, depth - 1);\n    bestValue = Math.max(bestValue, nextMin);\n    game.undo();\n  }\n  return bestValue;\n};\n\nvar minValue = function minValue(game, depth) {\n  if (cutoffTest(game, depth)) return evaluateState(game);\n  var bestValue = Infinity;\n  var possibleMoves = getMoveOrder(game);\n  for (var i = 0; i < possibleMoves.length; i += 1) {\n    positionsGenerated += 1;\n    game.ugly_move(possibleMoves[i]);\n    var nextMax = maxValue(game, depth - 1);\n    bestValue = Math.min(bestValue, nextMax);\n    game.undo();\n  }\n  return bestValue;\n};\n\nvar cutoffTest = function cutoffTest(game, depth) {\n  if (depth === 0) return true;\n  if (game.game_over()) return true;\n  return false;\n};\n\nvar evaluateState = function evaluateState(game) {\n  return (0, _boardEval.countMaterial)(game.board());\n};\n\nvar getMoveOrder = function getMoveOrder(game) {\n  return game.ugly_moves();\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWluaW1heC5qcz8xNWJlIl0sIm5hbWVzIjpbInBvc2l0aW9uc0dlbmVyYXRlZCIsIm1pbmltYXhTZWFyY2giLCJnYW1lIiwiZGVwdGgiLCJiZXN0TW92ZUZvdW5kIiwiaXNNYXhpbWl6aW5nUGxheWVyIiwidHVybiIsInBvc3NpYmxlTW92ZXMiLCJnZXRNb3ZlT3JkZXIiLCJiZXN0TW92ZVZhbHVlIiwiSW5maW5pdHkiLCJpIiwibGVuZ3RoIiwibmV4dE1vdmUiLCJ1Z2x5X21vdmUiLCJ2IiwibWluVmFsdWUiLCJ1bmRvIiwibWF4VmFsdWUiLCJtb3ZlIiwiY3V0b2ZmVGVzdCIsImV2YWx1YXRlU3RhdGUiLCJiZXN0VmFsdWUiLCJuZXh0TWluIiwiTWF0aCIsIm1heCIsIm5leHRNYXgiLCJtaW4iLCJnYW1lX292ZXIiLCJib2FyZCIsInVnbHlfbW92ZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFNQTs7QUFFQSxJQUFJQSxxQkFBcUIsQ0FBekIsQyxDQVJBOzs7Ozs7QUFVTyxJQUFNQyx3Q0FBZ0IsU0FBaEJBLGFBQWdCLENBQUNDLElBQUQsRUFBT0MsS0FBUCxFQUFpQjtBQUM1QyxNQUFJQyxzQkFBSjtBQUNBLE1BQU1DLHFCQUFxQkgsS0FBS0ksSUFBTCxPQUFnQixHQUEzQztBQUNBLE1BQU1DLGdCQUFnQkMsYUFBYU4sSUFBYixDQUF0QjtBQUNBRix1QkFBcUIsQ0FBckI7O0FBRUEsTUFBR0ssa0JBQUgsRUFBdUI7QUFDckIsUUFBSUksZ0JBQWdCLENBQUNDLFFBQXJCO0FBQ0EsU0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlKLGNBQWNLLE1BQWxDLEVBQTBDRCxLQUFLLENBQS9DLEVBQWtEO0FBQ2hEWCw0QkFBc0IsQ0FBdEI7QUFDQSxVQUFNYSxXQUFXTixjQUFjSSxDQUFkLENBQWpCO0FBQ0FULFdBQUtZLFNBQUwsQ0FBZUQsUUFBZjtBQUNBLFVBQUlFLElBQUlDLFNBQVNkLElBQVQsRUFBZUMsUUFBUSxDQUF2QixDQUFSO0FBQ0FELFdBQUtlLElBQUw7QUFDQSxVQUFJRixLQUFLTixhQUFULEVBQXdCO0FBQ3RCQSx3QkFBZ0JNLENBQWhCO0FBQ0FYLHdCQUFnQlMsUUFBaEI7QUFDRDtBQUNGO0FBQ0YsR0FiRCxNQWFPO0FBQ0wsUUFBSUosaUJBQWdCQyxRQUFwQjtBQUNBLFNBQUssSUFBSUMsS0FBSSxDQUFiLEVBQWdCQSxLQUFJSixjQUFjSyxNQUFsQyxFQUEwQ0QsTUFBSyxDQUEvQyxFQUFrRDtBQUNoRFgsNEJBQXNCLENBQXRCO0FBQ0EsVUFBTWEsWUFBV04sY0FBY0ksRUFBZCxDQUFqQjtBQUNBVCxXQUFLWSxTQUFMLENBQWVELFNBQWY7QUFDQSxVQUFNRSxLQUFJRyxTQUFTaEIsSUFBVCxFQUFlQyxRQUFRLENBQXZCLENBQVY7QUFDQUQsV0FBS2UsSUFBTDtBQUNBLFVBQUlGLE1BQUtOLGNBQVQsRUFBd0I7QUFDdEJBLHlCQUFnQk0sRUFBaEI7QUFDQVgsd0JBQWdCUyxTQUFoQjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFNBQU8sRUFBQ00sTUFBTWYsYUFBUCxFQUFzQkosc0NBQXRCLEVBQVA7QUFDRCxDQWxDTTs7QUFvQ1AsSUFBTWtCLFdBQVcsU0FBWEEsUUFBVyxDQUFDaEIsSUFBRCxFQUFPQyxLQUFQLEVBQWlCO0FBQ2hDLE1BQUlpQixXQUFXbEIsSUFBWCxFQUFpQkMsS0FBakIsQ0FBSixFQUE2QixPQUFPa0IsY0FBY25CLElBQWQsQ0FBUDtBQUM3QixNQUFJb0IsWUFBWSxDQUFDWixRQUFqQjtBQUNBLE1BQU1ILGdCQUFnQkMsYUFBYU4sSUFBYixDQUF0QjtBQUNBLE9BQUksSUFBSVMsSUFBSSxDQUFaLEVBQWVBLElBQUlKLGNBQWNLLE1BQWpDLEVBQXlDRCxLQUFLLENBQTlDLEVBQWlEO0FBQy9DWCwwQkFBc0IsQ0FBdEI7QUFDQUUsU0FBS1ksU0FBTCxDQUFlUCxjQUFjSSxDQUFkLENBQWY7QUFDQSxRQUFNWSxVQUFVUCxTQUFTZCxJQUFULEVBQWVDLFFBQVEsQ0FBdkIsQ0FBaEI7QUFDQW1CLGdCQUFZRSxLQUFLQyxHQUFMLENBQVNILFNBQVQsRUFBb0JDLE9BQXBCLENBQVo7QUFDQXJCLFNBQUtlLElBQUw7QUFDRDtBQUNELFNBQU9LLFNBQVA7QUFDRCxDQVpEOztBQWNBLElBQU1OLFdBQVcsU0FBWEEsUUFBVyxDQUFDZCxJQUFELEVBQU9DLEtBQVAsRUFBaUI7QUFDaEMsTUFBSWlCLFdBQVdsQixJQUFYLEVBQWlCQyxLQUFqQixDQUFKLEVBQTZCLE9BQU9rQixjQUFjbkIsSUFBZCxDQUFQO0FBQzdCLE1BQUlvQixZQUFZWixRQUFoQjtBQUNBLE1BQU1ILGdCQUFnQkMsYUFBYU4sSUFBYixDQUF0QjtBQUNBLE9BQUksSUFBSVMsSUFBSSxDQUFaLEVBQWVBLElBQUlKLGNBQWNLLE1BQWpDLEVBQXlDRCxLQUFLLENBQTlDLEVBQWlEO0FBQy9DWCwwQkFBc0IsQ0FBdEI7QUFDQUUsU0FBS1ksU0FBTCxDQUFlUCxjQUFjSSxDQUFkLENBQWY7QUFDQSxRQUFNZSxVQUFVUixTQUFTaEIsSUFBVCxFQUFlQyxRQUFRLENBQXZCLENBQWhCO0FBQ0FtQixnQkFBWUUsS0FBS0csR0FBTCxDQUFTTCxTQUFULEVBQW9CSSxPQUFwQixDQUFaO0FBQ0F4QixTQUFLZSxJQUFMO0FBQ0Q7QUFDRCxTQUFPSyxTQUFQO0FBQ0QsQ0FaRDs7QUFjQSxJQUFNRixhQUFhLFNBQWJBLFVBQWEsQ0FBQ2xCLElBQUQsRUFBT0MsS0FBUCxFQUFpQjtBQUNsQyxNQUFJQSxVQUFVLENBQWQsRUFBaUIsT0FBTyxJQUFQO0FBQ2pCLE1BQUlELEtBQUswQixTQUFMLEVBQUosRUFBc0IsT0FBTyxJQUFQO0FBQ3RCLFNBQU8sS0FBUDtBQUNELENBSkQ7O0FBTUEsSUFBTVAsZ0JBQWdCLFNBQWhCQSxhQUFnQixDQUFDbkIsSUFBRCxFQUFVO0FBQzlCLFNBQU8sOEJBQWNBLEtBQUsyQixLQUFMLEVBQWQsQ0FBUDtBQUNELENBRkQ7O0FBSUEsSUFBTXJCLGVBQWUsU0FBZkEsWUFBZSxDQUFDTixJQUFELEVBQVU7QUFDN0IsU0FBT0EsS0FBSzRCLFVBQUwsRUFBUDtBQUNELENBRkQiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaW5pbWF4IHNlYXJjaFxuICogV2hpdGUgaXMgYWx3YXlzIHRoZSBtYXhpbWl6aW5nIHBsYXllclxuICogICBhbmQgYmxhY2sgaXMgYWx3YXlzIHRoZSBtaW5pbWl6aW5nIHBsYXllclxuICpcbiAqL1xuaW1wb3J0IHsgY291bnRNYXRlcmlhbCB9IGZyb20gJy4vYm9hcmQtZXZhbCc7XG5cbmxldCBwb3NpdGlvbnNHZW5lcmF0ZWQgPSAwO1xuXG5leHBvcnQgY29uc3QgbWluaW1heFNlYXJjaCA9IChnYW1lLCBkZXB0aCkgPT4ge1xuICBsZXQgYmVzdE1vdmVGb3VuZDtcbiAgY29uc3QgaXNNYXhpbWl6aW5nUGxheWVyID0gZ2FtZS50dXJuKCkgPT09ICd3JztcbiAgY29uc3QgcG9zc2libGVNb3ZlcyA9IGdldE1vdmVPcmRlcihnYW1lKTtcbiAgcG9zaXRpb25zR2VuZXJhdGVkID0gMDtcblxuICBpZihpc01heGltaXppbmdQbGF5ZXIpIHtcbiAgICBsZXQgYmVzdE1vdmVWYWx1ZSA9IC1JbmZpbml0eTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3NpYmxlTW92ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHBvc2l0aW9uc0dlbmVyYXRlZCArPSAxO1xuICAgICAgY29uc3QgbmV4dE1vdmUgPSBwb3NzaWJsZU1vdmVzW2ldO1xuICAgICAgZ2FtZS51Z2x5X21vdmUobmV4dE1vdmUpO1xuICAgICAgbGV0IHYgPSBtaW5WYWx1ZShnYW1lLCBkZXB0aCAtIDEpO1xuICAgICAgZ2FtZS51bmRvKCk7XG4gICAgICBpZiAodiA+PSBiZXN0TW92ZVZhbHVlKSB7XG4gICAgICAgIGJlc3RNb3ZlVmFsdWUgPSB2O1xuICAgICAgICBiZXN0TW92ZUZvdW5kID0gbmV4dE1vdmU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBiZXN0TW92ZVZhbHVlID0gSW5maW5pdHk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NzaWJsZU1vdmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBwb3NpdGlvbnNHZW5lcmF0ZWQgKz0gMTtcbiAgICAgIGNvbnN0IG5leHRNb3ZlID0gcG9zc2libGVNb3Zlc1tpXTtcbiAgICAgIGdhbWUudWdseV9tb3ZlKG5leHRNb3ZlKTtcbiAgICAgIGNvbnN0IHYgPSBtYXhWYWx1ZShnYW1lLCBkZXB0aCAtIDEpO1xuICAgICAgZ2FtZS51bmRvKCk7XG4gICAgICBpZiAodiA8PSBiZXN0TW92ZVZhbHVlKSB7XG4gICAgICAgIGJlc3RNb3ZlVmFsdWUgPSB2O1xuICAgICAgICBiZXN0TW92ZUZvdW5kID0gbmV4dE1vdmU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7bW92ZTogYmVzdE1vdmVGb3VuZCwgcG9zaXRpb25zR2VuZXJhdGVkfTtcbn1cblxuY29uc3QgbWF4VmFsdWUgPSAoZ2FtZSwgZGVwdGgpID0+IHtcbiAgaWYgKGN1dG9mZlRlc3QoZ2FtZSwgZGVwdGgpKSByZXR1cm4gZXZhbHVhdGVTdGF0ZShnYW1lKTtcbiAgbGV0IGJlc3RWYWx1ZSA9IC1JbmZpbml0eTtcbiAgY29uc3QgcG9zc2libGVNb3ZlcyA9IGdldE1vdmVPcmRlcihnYW1lKTtcbiAgZm9yKGxldCBpID0gMDsgaSA8IHBvc3NpYmxlTW92ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBwb3NpdGlvbnNHZW5lcmF0ZWQgKz0gMTtcbiAgICBnYW1lLnVnbHlfbW92ZShwb3NzaWJsZU1vdmVzW2ldKTtcbiAgICBjb25zdCBuZXh0TWluID0gbWluVmFsdWUoZ2FtZSwgZGVwdGggLSAxKTtcbiAgICBiZXN0VmFsdWUgPSBNYXRoLm1heChiZXN0VmFsdWUsIG5leHRNaW4pO1xuICAgIGdhbWUudW5kbygpO1xuICB9XG4gIHJldHVybiBiZXN0VmFsdWU7XG59XG5cbmNvbnN0IG1pblZhbHVlID0gKGdhbWUsIGRlcHRoKSA9PiB7XG4gIGlmIChjdXRvZmZUZXN0KGdhbWUsIGRlcHRoKSkgcmV0dXJuIGV2YWx1YXRlU3RhdGUoZ2FtZSk7XG4gIGxldCBiZXN0VmFsdWUgPSBJbmZpbml0eTtcbiAgY29uc3QgcG9zc2libGVNb3ZlcyA9IGdldE1vdmVPcmRlcihnYW1lKTtcbiAgZm9yKGxldCBpID0gMDsgaSA8IHBvc3NpYmxlTW92ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBwb3NpdGlvbnNHZW5lcmF0ZWQgKz0gMTtcbiAgICBnYW1lLnVnbHlfbW92ZShwb3NzaWJsZU1vdmVzW2ldKTtcbiAgICBjb25zdCBuZXh0TWF4ID0gbWF4VmFsdWUoZ2FtZSwgZGVwdGggLSAxKTtcbiAgICBiZXN0VmFsdWUgPSBNYXRoLm1pbihiZXN0VmFsdWUsIG5leHRNYXgpO1xuICAgIGdhbWUudW5kbygpO1xuICB9XG4gIHJldHVybiBiZXN0VmFsdWU7XG59XG5cbmNvbnN0IGN1dG9mZlRlc3QgPSAoZ2FtZSwgZGVwdGgpID0+IHtcbiAgaWYgKGRlcHRoID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKGdhbWUuZ2FtZV9vdmVyKCkpIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmNvbnN0IGV2YWx1YXRlU3RhdGUgPSAoZ2FtZSkgPT4ge1xuICByZXR1cm4gY291bnRNYXRlcmlhbChnYW1lLmJvYXJkKCkpO1xufVxuXG5jb25zdCBnZXRNb3ZlT3JkZXIgPSAoZ2FtZSkgPT4ge1xuICByZXR1cm4gZ2FtZS51Z2x5X21vdmVzKCk7XG59XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9taW5pbWF4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports){eval("/*!\r\n * chessboard.js $version$\r\n *\r\n * Copyright 2013 Chris Oakman\r\n * Released under the MIT license\r\n * https://github.com/oakmac/chessboardjs/blob/master/LICENSE\r\n *\r\n * Date: $date$\r\n */\r\n\r\n//------------------------------------------------------------------------------\r\n// Chess Util Functions\r\n//------------------------------------------------------------------------------\r\nvar COLUMNS = 'abcdefgh'.split('');\r\n\r\nfunction validMove(move) {\r\n  // move should be a string\r\n  if (typeof move !== 'string') return false;\r\n\r\n  // move should be in the form of \"e2-e4\", \"f6-d5\"\r\n  var tmp = move.split('-');\r\n  if (tmp.length !== 2) return false;\r\n\r\n  return (validSquare(tmp[0]) === true && validSquare(tmp[1]) === true);\r\n}\r\n\r\nfunction validSquare(square) {\r\n  if (typeof square !== 'string') return false;\r\n  return (square.search(/^[a-h][1-8]$/) !== -1);\r\n}\r\n\r\nfunction validPieceCode(code) {\r\n  if (typeof code !== 'string') return false;\r\n  return (code.search(/^[bw][KQRNBP]$/) !== -1);\r\n}\r\n\r\n// TODO: this whole function could probably be replaced with a single regex\r\nfunction validFen(fen) {\r\n  if (typeof fen !== 'string') return false;\r\n\r\n  // cut off any move, castling, etc info from the end\r\n  // we're only interested in position information\r\n  fen = fen.replace(/ .+$/, '');\r\n\r\n  // FEN should be 8 sections separated by slashes\r\n  var chunks = fen.split('/');\r\n  if (chunks.length !== 8) return false;\r\n\r\n  // check the piece sections\r\n  for (var i = 0; i < 8; i++) {\r\n    if (chunks[i] === '' ||\r\n        chunks[i].length > 8 ||\r\n        chunks[i].search(/[^kqrbnpKQRNBP1-8]/) !== -1) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction validPositionObject(pos) {\r\n  if (typeof pos !== 'object') return false;\r\n\r\n  for (var i in pos) {\r\n    if (pos.hasOwnProperty(i) !== true) continue;\r\n\r\n    if (validSquare(i) !== true || validPieceCode(pos[i]) !== true) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// convert FEN piece code to bP, wK, etc\r\nfunction fenToPieceCode(piece) {\r\n  // black piece\r\n  if (piece.toLowerCase() === piece) {\r\n    return 'b' + piece.toUpperCase();\r\n  }\r\n\r\n  // white piece\r\n  return 'w' + piece.toUpperCase();\r\n}\r\n\r\n// convert bP, wK, etc code to FEN structure\r\nfunction pieceCodeToFen(piece) {\r\n  var tmp = piece.split('');\r\n\r\n  // white piece\r\n  if (tmp[0] === 'w') {\r\n    return tmp[1].toUpperCase();\r\n  }\r\n\r\n  // black piece\r\n  return tmp[1].toLowerCase();\r\n}\r\n\r\n// convert FEN string to position object\r\n// returns false if the FEN string is invalid\r\nfunction fenToObj(fen) {\r\n  if (validFen(fen) !== true) {\r\n    return false;\r\n  }\r\n\r\n  // cut off any move, castling, etc info from the end\r\n  // we're only interested in position information\r\n  fen = fen.replace(/ .+$/, '');\r\n\r\n  var rows = fen.split('/');\r\n  var position = {};\r\n\r\n  var currentRow = 8;\r\n  for (var i = 0; i < 8; i++) {\r\n    var row = rows[i].split('');\r\n    var colIndex = 0;\r\n\r\n    // loop through each character in the FEN section\r\n    for (var j = 0; j < row.length; j++) {\r\n      // number / empty squares\r\n      if (row[j].search(/[1-8]/) !== -1) {\r\n        var emptySquares = parseInt(row[j], 10);\r\n        colIndex += emptySquares;\r\n      }\r\n      // piece\r\n      else {\r\n        var square = COLUMNS[colIndex] + currentRow;\r\n        position[square] = fenToPieceCode(row[j]);\r\n        colIndex++;\r\n      }\r\n    }\r\n\r\n    currentRow--;\r\n  }\r\n\r\n  return position;\r\n}\r\n\r\n// position object to FEN string\r\n// returns false if the obj is not a valid position object\r\nfunction objToFen(obj) {\r\n  if (validPositionObject(obj) !== true) {\r\n    return false;\r\n  }\r\n\r\n  var fen = '';\r\n\r\n  var currentRow = 8;\r\n  for (var i = 0; i < 8; i++) {\r\n    for (var j = 0; j < 8; j++) {\r\n      var square = COLUMNS[j] + currentRow;\r\n\r\n      // piece exists\r\n      if (obj.hasOwnProperty(square) === true) {\r\n        fen += pieceCodeToFen(obj[square]);\r\n      }\r\n\r\n      // empty space\r\n      else {\r\n        fen += '1';\r\n      }\r\n    }\r\n\r\n    if (i !== 7) {\r\n      fen += '/';\r\n    }\r\n\r\n    currentRow--;\r\n  }\r\n\r\n  // squeeze the numbers together\r\n  // haha, I love this solution...\r\n  fen = fen.replace(/11111111/g, '8');\r\n  fen = fen.replace(/1111111/g, '7');\r\n  fen = fen.replace(/111111/g, '6');\r\n  fen = fen.replace(/11111/g, '5');\r\n  fen = fen.replace(/1111/g, '4');\r\n  fen = fen.replace(/111/g, '3');\r\n  fen = fen.replace(/11/g, '2');\r\n\r\n  return fen;\r\n}\r\n\r\nvar ChessBoard = function (containerElOrId, cfg) {\r\n\r\ncfg = cfg || {};\r\n\r\n//------------------------------------------------------------------------------\r\n// Constants\r\n//------------------------------------------------------------------------------\r\n\r\nvar MINIMUM_JQUERY_VERSION = '1.7.0',\r\n  START_FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR',\r\n  START_POSITION = fenToObj(START_FEN);\r\n\r\n// use unique class names to prevent clashing with anything else on the page\r\n// and simplify selectors\r\n// NOTE: these should never change\r\nvar CSS = {\r\n  alpha: 'alpha-d2270',\r\n  black: 'black-3c85d',\r\n  board: 'board-b72b1',\r\n  chessboard: 'chessboard-63f37',\r\n  clearfix: 'clearfix-7da63',\r\n  highlight1: 'highlight1-32417',\r\n  highlight2: 'highlight2-9c5d2',\r\n  notation: 'notation-322f9',\r\n  numeric: 'numeric-fc462',\r\n  piece: 'piece-417db',\r\n  row: 'row-5277c',\r\n  sparePieces: 'spare-pieces-7492f',\r\n  sparePiecesBottom: 'spare-pieces-bottom-ae20f',\r\n  sparePiecesTop: 'spare-pieces-top-4028b',\r\n  square: 'square-55d63',\r\n  white: 'white-1e1d7'\r\n};\r\n\r\n//------------------------------------------------------------------------------\r\n// Module Scope Variables\r\n//------------------------------------------------------------------------------\r\n\r\n// DOM elements\r\nvar containerEl,\r\n  boardEl,\r\n  draggedPieceEl,\r\n  sparePiecesTopEl,\r\n  sparePiecesBottomEl;\r\n\r\n// constructor return object\r\nvar widget = {};\r\n\r\n//------------------------------------------------------------------------------\r\n// Stateful\r\n//------------------------------------------------------------------------------\r\n\r\nvar ANIMATION_HAPPENING = false,\r\n  BOARD_BORDER_SIZE = 2,\r\n  CURRENT_ORIENTATION = 'white',\r\n  CURRENT_POSITION = {},\r\n  SQUARE_SIZE,\r\n  DRAGGED_PIECE,\r\n  DRAGGED_PIECE_LOCATION,\r\n  DRAGGED_PIECE_SOURCE,\r\n  DRAGGING_A_PIECE = false,\r\n  SPARE_PIECE_ELS_IDS = {},\r\n  SQUARE_ELS_IDS = {},\r\n  SQUARE_ELS_OFFSETS;\r\n\r\n//------------------------------------------------------------------------------\r\n// JS Util Functions\r\n//------------------------------------------------------------------------------\r\n\r\n// http://tinyurl.com/3ttloxj\r\nfunction uuid() {\r\n  return 'xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx'.replace(/x/g, function(c) {\r\n    var r = Math.random() * 16 | 0;\r\n    return r.toString(16);\r\n  });\r\n}\r\n\r\nfunction deepCopy(thing) {\r\n  return JSON.parse(JSON.stringify(thing));\r\n}\r\n\r\nfunction parseSemVer(version) {\r\n  var tmp = version.split('.');\r\n  return {\r\n    major: parseInt(tmp[0], 10),\r\n    minor: parseInt(tmp[1], 10),\r\n    patch: parseInt(tmp[2], 10)\r\n  };\r\n}\r\n\r\n// returns true if version is >= minimum\r\nfunction compareSemVer(version, minimum) {\r\n  version = parseSemVer(version);\r\n  minimum = parseSemVer(minimum);\r\n\r\n  var versionNum = (version.major * 10000 * 10000) +\r\n    (version.minor * 10000) + version.patch;\r\n  var minimumNum = (minimum.major * 10000 * 10000) +\r\n    (minimum.minor * 10000) + minimum.patch;\r\n\r\n  return (versionNum >= minimumNum);\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Validation / Errors\r\n//------------------------------------------------------------------------------\r\n\r\nfunction error(code, msg, obj) {\r\n  // do nothing if showErrors is not set\r\n  if (cfg.hasOwnProperty('showErrors') !== true ||\r\n      cfg.showErrors === false) {\r\n    return;\r\n  }\r\n\r\n  var errorText = 'ChessBoard Error ' + code + ': ' + msg;\r\n\r\n  // print to console\r\n  if (cfg.showErrors === 'console' &&\r\n      typeof console === 'object' &&\r\n      typeof console.log === 'function') {\r\n    console.log(errorText);\r\n    if (arguments.length >= 2) {\r\n      console.log(obj);\r\n    }\r\n    return;\r\n  }\r\n\r\n  // alert errors\r\n  if (cfg.showErrors === 'alert') {\r\n    if (obj) {\r\n      errorText += '\\n\\n' + JSON.stringify(obj);\r\n    }\r\n    window.alert(errorText);\r\n    return;\r\n  }\r\n\r\n  // custom function\r\n  if (typeof cfg.showErrors === 'function') {\r\n    cfg.showErrors(code, msg, obj);\r\n  }\r\n}\r\n\r\n// check dependencies\r\nfunction checkDeps() {\r\n  // if containerId is a string, it must be the ID of a DOM node\r\n  if (typeof containerElOrId === 'string') {\r\n    // cannot be empty\r\n    if (containerElOrId === '') {\r\n      window.alert('ChessBoard Error 1001: ' +\r\n        'The first argument to ChessBoard() cannot be an empty string.' +\r\n        '\\n\\nExiting...');\r\n      return false;\r\n    }\r\n\r\n    // make sure the container element exists in the DOM\r\n    var el = document.getElementById(containerElOrId);\r\n    if (! el) {\r\n      window.alert('ChessBoard Error 1002: Element with id \"' +\r\n        containerElOrId + '\" does not exist in the DOM.' +\r\n        '\\n\\nExiting...');\r\n      return false;\r\n    }\r\n\r\n    // set the containerEl\r\n    containerEl = $(el);\r\n  }\r\n\r\n  // else it must be something that becomes a jQuery collection\r\n  // with size 1\r\n  // ie: a single DOM node or jQuery object\r\n  else {\r\n    containerEl = $(containerElOrId);\r\n\r\n    if (containerEl.length !== 1) {\r\n      window.alert('ChessBoard Error 1003: The first argument to ' +\r\n        'ChessBoard() must be an ID or a single DOM node.' +\r\n        '\\n\\nExiting...');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // JSON must exist\r\n  if (! window.JSON ||\r\n      typeof JSON.stringify !== 'function' ||\r\n      typeof JSON.parse !== 'function') {\r\n    window.alert('ChessBoard Error 1004: JSON does not exist. ' +\r\n      'Please include a JSON polyfill.\\n\\nExiting...');\r\n    return false;\r\n  }\r\n\r\n  // check for a compatible version of jQuery\r\n  if (! (typeof window.$ && $.fn && $.fn.jquery &&\r\n      compareSemVer($.fn.jquery, MINIMUM_JQUERY_VERSION) === true)) {\r\n    window.alert('ChessBoard Error 1005: Unable to find a valid version ' +\r\n      'of jQuery. Please include jQuery ' + MINIMUM_JQUERY_VERSION + ' or ' +\r\n      'higher on the page.\\n\\nExiting...');\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction validAnimationSpeed(speed) {\r\n  if (speed === 'fast' || speed === 'slow') {\r\n    return true;\r\n  }\r\n\r\n  if ((parseInt(speed, 10) + '') !== (speed + '')) {\r\n    return false;\r\n  }\r\n\r\n  return (speed >= 0);\r\n}\r\n\r\n// validate config / set default options\r\nfunction expandConfig() {\r\n  if (typeof cfg === 'string' || validPositionObject(cfg) === true) {\r\n    cfg = {\r\n      position: cfg\r\n    };\r\n  }\r\n\r\n  // default for orientation is white\r\n  if (cfg.orientation !== 'black') {\r\n    cfg.orientation = 'white';\r\n  }\r\n  CURRENT_ORIENTATION = cfg.orientation;\r\n\r\n  // default for showNotation is true\r\n  if (cfg.showNotation !== false) {\r\n    cfg.showNotation = true;\r\n  }\r\n\r\n  // default for draggable is false\r\n  if (cfg.draggable !== true) {\r\n    cfg.draggable = false;\r\n  }\r\n\r\n  // default for dropOffBoard is 'snapback'\r\n  if (cfg.dropOffBoard !== 'trash') {\r\n    cfg.dropOffBoard = 'snapback';\r\n  }\r\n\r\n  // default for sparePieces is false\r\n  if (cfg.sparePieces !== true) {\r\n    cfg.sparePieces = false;\r\n  }\r\n\r\n  // draggable must be true if sparePieces is enabled\r\n  if (cfg.sparePieces === true) {\r\n    cfg.draggable = true;\r\n  }\r\n\r\n  // default piece theme is wikipedia\r\n  if (cfg.hasOwnProperty('pieceTheme') !== true ||\r\n      (typeof cfg.pieceTheme !== 'string' &&\r\n       typeof cfg.pieceTheme !== 'function')) {\r\n    cfg.pieceTheme = 'img/chesspieces/wikipedia/{piece}.png';\r\n  }\r\n\r\n  // animation speeds\r\n  if (cfg.hasOwnProperty('appearSpeed') !== true ||\r\n      validAnimationSpeed(cfg.appearSpeed) !== true) {\r\n    cfg.appearSpeed = 200;\r\n  }\r\n  if (cfg.hasOwnProperty('moveSpeed') !== true ||\r\n      validAnimationSpeed(cfg.moveSpeed) !== true) {\r\n    cfg.moveSpeed = 200;\r\n  }\r\n  if (cfg.hasOwnProperty('snapbackSpeed') !== true ||\r\n      validAnimationSpeed(cfg.snapbackSpeed) !== true) {\r\n    cfg.snapbackSpeed = 50;\r\n  }\r\n  if (cfg.hasOwnProperty('snapSpeed') !== true ||\r\n      validAnimationSpeed(cfg.snapSpeed) !== true) {\r\n    cfg.snapSpeed = 25;\r\n  }\r\n  if (cfg.hasOwnProperty('trashSpeed') !== true ||\r\n      validAnimationSpeed(cfg.trashSpeed) !== true) {\r\n    cfg.trashSpeed = 100;\r\n  }\r\n\r\n  // make sure position is valid\r\n  if (cfg.hasOwnProperty('position') === true) {\r\n    if (cfg.position === 'start') {\r\n      CURRENT_POSITION = deepCopy(START_POSITION);\r\n    }\r\n\r\n    else if (validFen(cfg.position) === true) {\r\n      CURRENT_POSITION = fenToObj(cfg.position);\r\n    }\r\n\r\n    else if (validPositionObject(cfg.position) === true) {\r\n      CURRENT_POSITION = deepCopy(cfg.position);\r\n    }\r\n\r\n    else {\r\n      error(7263, 'Invalid value passed to config.position.', cfg.position);\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// DOM Misc\r\n//------------------------------------------------------------------------------\r\n\r\n// calculates square size based on the width of the container\r\n// got a little CSS black magic here, so let me explain:\r\n// get the width of the container element (could be anything), reduce by 1 for\r\n// fudge factor, and then keep reducing until we find an exact mod 8 for\r\n// our square size\r\nfunction calculateSquareSize() {\r\n  var containerWidth = parseInt(containerEl.width(), 10);\r\n\r\n  // defensive, prevent infinite loop\r\n  if (! containerWidth || containerWidth <= 0) {\r\n    return 0;\r\n  }\r\n\r\n  // pad one pixel\r\n  var boardWidth = containerWidth - 1;\r\n\r\n  while (boardWidth % 8 !== 0 && boardWidth > 0) {\r\n    boardWidth--;\r\n  }\r\n\r\n  return (boardWidth / 8);\r\n}\r\n\r\n// create random IDs for elements\r\nfunction createElIds() {\r\n  // squares on the board\r\n  for (var i = 0; i < COLUMNS.length; i++) {\r\n    for (var j = 1; j <= 8; j++) {\r\n      var square = COLUMNS[i] + j;\r\n      SQUARE_ELS_IDS[square] = square + '-' + uuid();\r\n    }\r\n  }\r\n\r\n  // spare pieces\r\n  var pieces = 'KQRBNP'.split('');\r\n  for (var i = 0; i < pieces.length; i++) {\r\n    var whitePiece = 'w' + pieces[i];\r\n    var blackPiece = 'b' + pieces[i];\r\n    SPARE_PIECE_ELS_IDS[whitePiece] = whitePiece + '-' + uuid();\r\n    SPARE_PIECE_ELS_IDS[blackPiece] = blackPiece + '-' + uuid();\r\n  }\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Markup Building\r\n//------------------------------------------------------------------------------\r\n\r\nfunction buildBoardContainer() {\r\n  var html = '<div class=\"' + CSS.chessboard + '\">';\r\n\r\n  if (cfg.sparePieces === true) {\r\n    html += '<div class=\"' + CSS.sparePieces + ' ' +\r\n      CSS.sparePiecesTop + '\"></div>';\r\n  }\r\n\r\n  html += '<div class=\"' + CSS.board + '\"></div>';\r\n\r\n  if (cfg.sparePieces === true) {\r\n    html += '<div class=\"' + CSS.sparePieces + ' ' +\r\n      CSS.sparePiecesBottom + '\"></div>';\r\n  }\r\n\r\n  html += '</div>';\r\n\r\n  return html;\r\n}\r\n\r\n/*\r\nvar buildSquare = function(color, size, id) {\r\n  var html = '<div class=\"' + CSS.square + ' ' + CSS[color] + '\" ' +\r\n  'style=\"width: ' + size + 'px; height: ' + size + 'px\" ' +\r\n  'id=\"' + id + '\">';\r\n\r\n  if (cfg.showNotation === true) {\r\n\r\n  }\r\n\r\n  html += '</div>';\r\n\r\n  return html;\r\n};\r\n*/\r\n\r\nfunction buildBoard(orientation) {\r\n  if (orientation !== 'black') {\r\n    orientation = 'white';\r\n  }\r\n\r\n  var html = '';\r\n\r\n  // algebraic notation / orientation\r\n  var alpha = deepCopy(COLUMNS);\r\n  var row = 8;\r\n  if (orientation === 'black') {\r\n    alpha.reverse();\r\n    row = 1;\r\n  }\r\n\r\n  var squareColor = 'white';\r\n  for (var i = 0; i < 8; i++) {\r\n    html += '<div class=\"' + CSS.row + '\">';\r\n    for (var j = 0; j < 8; j++) {\r\n      var square = alpha[j] + row;\r\n\r\n      html += '<div class=\"' + CSS.square + ' ' + CSS[squareColor] + ' ' +\r\n        'square-' + square + '\" ' +\r\n        'style=\"width: ' + SQUARE_SIZE + 'px; height: ' + SQUARE_SIZE + 'px\" ' +\r\n        'id=\"' + SQUARE_ELS_IDS[square] + '\" ' +\r\n        'data-square=\"' + square + '\">';\r\n\r\n      if (cfg.showNotation === true) {\r\n        // alpha notation\r\n        if ((orientation === 'white' && row === 1) ||\r\n            (orientation === 'black' && row === 8)) {\r\n          html += '<div class=\"' + CSS.notation + ' ' + CSS.alpha + '\">' +\r\n            alpha[j] + '</div>';\r\n        }\r\n\r\n        // numeric notation\r\n        if (j === 0) {\r\n          html += '<div class=\"' + CSS.notation + ' ' + CSS.numeric + '\">' +\r\n            row + '</div>';\r\n        }\r\n      }\r\n\r\n      html += '</div>'; // end .square\r\n\r\n      squareColor = (squareColor === 'white' ? 'black' : 'white');\r\n    }\r\n    html += '<div class=\"' + CSS.clearfix + '\"></div></div>';\r\n\r\n    squareColor = (squareColor === 'white' ? 'black' : 'white');\r\n\r\n    if (orientation === 'white') {\r\n      row--;\r\n    }\r\n    else {\r\n      row++;\r\n    }\r\n  }\r\n\r\n  return html;\r\n}\r\n\r\nfunction buildPieceImgSrc(piece) {\r\n  if (typeof cfg.pieceTheme === 'function') {\r\n    return cfg.pieceTheme(piece);\r\n  }\r\n\r\n  if (typeof cfg.pieceTheme === 'string') {\r\n    return cfg.pieceTheme.replace(/{piece}/g, piece);\r\n  }\r\n\r\n  // NOTE: this should never happen\r\n  error(8272, 'Unable to build image source for cfg.pieceTheme.');\r\n  return '';\r\n}\r\n\r\nfunction buildPiece(piece, hidden, id) {\r\n  var html = '<img src=\"' + buildPieceImgSrc(piece) + '\" ';\r\n  if (id && typeof id === 'string') {\r\n    html += 'id=\"' + id + '\" ';\r\n  }\r\n  html += 'alt=\"\" ' +\r\n  'class=\"' + CSS.piece + '\" ' +\r\n  'data-piece=\"' + piece + '\" ' +\r\n  'style=\"width: ' + SQUARE_SIZE + 'px;' +\r\n  'height: ' + SQUARE_SIZE + 'px;';\r\n  if (hidden === true) {\r\n    html += 'display:none;';\r\n  }\r\n  html += '\" />';\r\n\r\n  return html;\r\n}\r\n\r\nfunction buildSparePieces(color) {\r\n  var pieces = ['wK', 'wQ', 'wR', 'wB', 'wN', 'wP'];\r\n  if (color === 'black') {\r\n    pieces = ['bK', 'bQ', 'bR', 'bB', 'bN', 'bP'];\r\n  }\r\n\r\n  var html = '';\r\n  for (var i = 0; i < pieces.length; i++) {\r\n    html += buildPiece(pieces[i], false, SPARE_PIECE_ELS_IDS[pieces[i]]);\r\n  }\r\n\r\n  return html;\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Animations\r\n//------------------------------------------------------------------------------\r\n\r\nfunction animateSquareToSquare(src, dest, piece, completeFn) {\r\n  // get information about the source and destination squares\r\n  var srcSquareEl = $('#' + SQUARE_ELS_IDS[src]);\r\n  var srcSquarePosition = srcSquareEl.offset();\r\n  var destSquareEl = $('#' + SQUARE_ELS_IDS[dest]);\r\n  var destSquarePosition = destSquareEl.offset();\r\n\r\n  // create the animated piece and absolutely position it\r\n  // over the source square\r\n  var animatedPieceId = uuid();\r\n  $('body').append(buildPiece(piece, true, animatedPieceId));\r\n  var animatedPieceEl = $('#' + animatedPieceId);\r\n  animatedPieceEl.css({\r\n    display: '',\r\n    position: 'absolute',\r\n    top: srcSquarePosition.top,\r\n    left: srcSquarePosition.left\r\n  });\r\n\r\n  // remove original piece from source square\r\n  srcSquareEl.find('.' + CSS.piece).remove();\r\n\r\n  // on complete\r\n  var complete = function() {\r\n    // add the \"real\" piece to the destination square\r\n    destSquareEl.append(buildPiece(piece));\r\n\r\n    // remove the animated piece\r\n    animatedPieceEl.remove();\r\n\r\n    // run complete function\r\n    if (typeof completeFn === 'function') {\r\n      completeFn();\r\n    }\r\n  };\r\n\r\n  // animate the piece to the destination square\r\n  var opts = {\r\n    duration: cfg.moveSpeed,\r\n    complete: complete\r\n  };\r\n  animatedPieceEl.animate(destSquarePosition, opts);\r\n}\r\n\r\nfunction animateSparePieceToSquare(piece, dest, completeFn) {\r\n  var srcOffset = $('#' + SPARE_PIECE_ELS_IDS[piece]).offset();\r\n  var destSquareEl = $('#' + SQUARE_ELS_IDS[dest]);\r\n  var destOffset = destSquareEl.offset();\r\n\r\n  // create the animate piece\r\n  var pieceId = uuid();\r\n  $('body').append(buildPiece(piece, true, pieceId));\r\n  var animatedPieceEl = $('#' + pieceId);\r\n  animatedPieceEl.css({\r\n    display: '',\r\n    position: 'absolute',\r\n    left: srcOffset.left,\r\n    top: srcOffset.top\r\n  });\r\n\r\n  // on complete\r\n  var complete = function() {\r\n    // add the \"real\" piece to the destination square\r\n    destSquareEl.find('.' + CSS.piece).remove();\r\n    destSquareEl.append(buildPiece(piece));\r\n\r\n    // remove the animated piece\r\n    animatedPieceEl.remove();\r\n\r\n    // run complete function\r\n    if (typeof completeFn === 'function') {\r\n      completeFn();\r\n    }\r\n  };\r\n\r\n  // animate the piece to the destination square\r\n  var opts = {\r\n    duration: cfg.moveSpeed,\r\n    complete: complete\r\n  };\r\n  animatedPieceEl.animate(destOffset, opts);\r\n}\r\n\r\n// execute an array of animations\r\nfunction doAnimations(a, oldPos, newPos) {\r\n  if (a.length === 0) {\r\n    return;\r\n  }\r\n\r\n  ANIMATION_HAPPENING = true;\r\n\r\n  var numFinished = 0;\r\n  function onFinish() {\r\n    numFinished++;\r\n\r\n    // exit if all the animations aren't finished\r\n    if (numFinished !== a.length) return;\r\n\r\n    drawPositionInstant();\r\n    ANIMATION_HAPPENING = false;\r\n\r\n    // run their onMoveEnd function\r\n    if (cfg.hasOwnProperty('onMoveEnd') === true &&\r\n      typeof cfg.onMoveEnd === 'function') {\r\n      cfg.onMoveEnd(deepCopy(oldPos), deepCopy(newPos));\r\n    }\r\n  }\r\n\r\n  for (var i = 0; i < a.length; i++) {\r\n    // clear a piece\r\n    if (a[i].type === 'clear') {\r\n      $('#' + SQUARE_ELS_IDS[a[i].square] + ' .' + CSS.piece)\r\n        .fadeOut(cfg.trashSpeed, onFinish);\r\n    }\r\n\r\n    // add a piece (no spare pieces)\r\n    if (a[i].type === 'add' && cfg.sparePieces !== true) {\r\n      $('#' + SQUARE_ELS_IDS[a[i].square])\r\n        .append(buildPiece(a[i].piece, true))\r\n        .find('.' + CSS.piece)\r\n        .fadeIn(cfg.appearSpeed, onFinish);\r\n    }\r\n\r\n    // add a piece from a spare piece\r\n    if (a[i].type === 'add' && cfg.sparePieces === true) {\r\n      animateSparePieceToSquare(a[i].piece, a[i].square, onFinish);\r\n    }\r\n\r\n    // move a piece\r\n    if (a[i].type === 'move') {\r\n      animateSquareToSquare(a[i].source, a[i].destination, a[i].piece,\r\n        onFinish);\r\n    }\r\n  }\r\n}\r\n\r\n// returns the distance between two squares\r\nfunction squareDistance(s1, s2) {\r\n  s1 = s1.split('');\r\n  var s1x = COLUMNS.indexOf(s1[0]) + 1;\r\n  var s1y = parseInt(s1[1], 10);\r\n\r\n  s2 = s2.split('');\r\n  var s2x = COLUMNS.indexOf(s2[0]) + 1;\r\n  var s2y = parseInt(s2[1], 10);\r\n\r\n  var xDelta = Math.abs(s1x - s2x);\r\n  var yDelta = Math.abs(s1y - s2y);\r\n\r\n  if (xDelta >= yDelta) return xDelta;\r\n  return yDelta;\r\n}\r\n\r\n// returns an array of closest squares from square\r\nfunction createRadius(square) {\r\n  var squares = [];\r\n\r\n  // calculate distance of all squares\r\n  for (var i = 0; i < 8; i++) {\r\n    for (var j = 0; j < 8; j++) {\r\n      var s = COLUMNS[i] + (j + 1);\r\n\r\n      // skip the square we're starting from\r\n      if (square === s) continue;\r\n\r\n      squares.push({\r\n        square: s,\r\n        distance: squareDistance(square, s)\r\n      });\r\n    }\r\n  }\r\n\r\n  // sort by distance\r\n  squares.sort(function(a, b) {\r\n    return a.distance - b.distance;\r\n  });\r\n\r\n  // just return the square code\r\n  var squares2 = [];\r\n  for (var i = 0; i < squares.length; i++) {\r\n    squares2.push(squares[i].square);\r\n  }\r\n\r\n  return squares2;\r\n}\r\n\r\n// returns the square of the closest instance of piece\r\n// returns false if no instance of piece is found in position\r\nfunction findClosestPiece(position, piece, square) {\r\n  // create array of closest squares from square\r\n  var closestSquares = createRadius(square);\r\n\r\n  // search through the position in order of distance for the piece\r\n  for (var i = 0; i < closestSquares.length; i++) {\r\n    var s = closestSquares[i];\r\n\r\n    if (position.hasOwnProperty(s) === true && position[s] === piece) {\r\n      return s;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n// calculate an array of animations that need to happen in order to get\r\n// from pos1 to pos2\r\nfunction calculateAnimations(pos1, pos2) {\r\n  // make copies of both\r\n  pos1 = deepCopy(pos1);\r\n  pos2 = deepCopy(pos2);\r\n\r\n  var animations = [];\r\n  var squaresMovedTo = {};\r\n\r\n  // remove pieces that are the same in both positions\r\n  for (var i in pos2) {\r\n    if (pos2.hasOwnProperty(i) !== true) continue;\r\n\r\n    if (pos1.hasOwnProperty(i) === true && pos1[i] === pos2[i]) {\r\n      delete pos1[i];\r\n      delete pos2[i];\r\n    }\r\n  }\r\n\r\n  // find all the \"move\" animations\r\n  for (var i in pos2) {\r\n    if (pos2.hasOwnProperty(i) !== true) continue;\r\n\r\n    var closestPiece = findClosestPiece(pos1, pos2[i], i);\r\n    if (closestPiece !== false) {\r\n      animations.push({\r\n        type: 'move',\r\n        source: closestPiece,\r\n        destination: i,\r\n        piece: pos2[i]\r\n      });\r\n\r\n      delete pos1[closestPiece];\r\n      delete pos2[i];\r\n      squaresMovedTo[i] = true;\r\n    }\r\n  }\r\n\r\n  // add pieces to pos2\r\n  for (var i in pos2) {\r\n    if (pos2.hasOwnProperty(i) !== true) continue;\r\n\r\n    animations.push({\r\n      type: 'add',\r\n      square: i,\r\n      piece: pos2[i]\r\n    })\r\n\r\n    delete pos2[i];\r\n  }\r\n\r\n  // clear pieces from pos1\r\n  for (var i in pos1) {\r\n    if (pos1.hasOwnProperty(i) !== true) continue;\r\n\r\n    // do not clear a piece if it is on a square that is the result\r\n    // of a \"move\", ie: a piece capture\r\n    if (squaresMovedTo.hasOwnProperty(i) === true) continue;\r\n\r\n    animations.push({\r\n      type: 'clear',\r\n      square: i,\r\n      piece: pos1[i]\r\n    });\r\n\r\n    delete pos1[i];\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Control Flow\r\n//------------------------------------------------------------------------------\r\n\r\nfunction drawPositionInstant() {\r\n  // clear the board\r\n  boardEl.find('.' + CSS.piece).remove();\r\n\r\n  // add the pieces\r\n  for (var i in CURRENT_POSITION) {\r\n    if (CURRENT_POSITION.hasOwnProperty(i) !== true) continue;\r\n\r\n    $('#' + SQUARE_ELS_IDS[i]).append(buildPiece(CURRENT_POSITION[i]));\r\n  }\r\n}\r\n\r\nfunction drawBoard() {\r\n  boardEl.html(buildBoard(CURRENT_ORIENTATION));\r\n  drawPositionInstant();\r\n\r\n  if (cfg.sparePieces === true) {\r\n    if (CURRENT_ORIENTATION === 'white') {\r\n      sparePiecesTopEl.html(buildSparePieces('black'));\r\n      sparePiecesBottomEl.html(buildSparePieces('white'));\r\n    }\r\n    else {\r\n      sparePiecesTopEl.html(buildSparePieces('white'));\r\n      sparePiecesBottomEl.html(buildSparePieces('black'));\r\n    }\r\n  }\r\n}\r\n\r\n// given a position and a set of moves, return a new position\r\n// with the moves executed\r\nfunction calculatePositionFromMoves(position, moves) {\r\n  position = deepCopy(position);\r\n\r\n  for (var i in moves) {\r\n    if (moves.hasOwnProperty(i) !== true) continue;\r\n\r\n    // skip the move if the position doesn't have a piece on the source square\r\n    if (position.hasOwnProperty(i) !== true) continue;\r\n\r\n    var piece = position[i];\r\n    delete position[i];\r\n    position[moves[i]] = piece;\r\n  }\r\n\r\n  return position;\r\n}\r\n\r\nfunction setCurrentPosition(position) {\r\n  var oldPos = deepCopy(CURRENT_POSITION);\r\n  var newPos = deepCopy(position);\r\n  var oldFen = objToFen(oldPos);\r\n  var newFen = objToFen(newPos);\r\n\r\n  // do nothing if no change in position\r\n  if (oldFen === newFen) return;\r\n\r\n  // run their onChange function\r\n  if (cfg.hasOwnProperty('onChange') === true &&\r\n    typeof cfg.onChange === 'function') {\r\n    cfg.onChange(oldPos, newPos);\r\n  }\r\n\r\n  // update state\r\n  CURRENT_POSITION = position;\r\n}\r\n\r\nfunction isXYOnSquare(x, y) {\r\n  for (var i in SQUARE_ELS_OFFSETS) {\r\n    if (SQUARE_ELS_OFFSETS.hasOwnProperty(i) !== true) continue;\r\n\r\n    var s = SQUARE_ELS_OFFSETS[i];\r\n    if (x >= s.left && x < s.left + SQUARE_SIZE &&\r\n        y >= s.top && y < s.top + SQUARE_SIZE) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return 'offboard';\r\n}\r\n\r\n// records the XY coords of every square into memory\r\nfunction captureSquareOffsets() {\r\n  SQUARE_ELS_OFFSETS = {};\r\n\r\n  for (var i in SQUARE_ELS_IDS) {\r\n    if (SQUARE_ELS_IDS.hasOwnProperty(i) !== true) continue;\r\n\r\n    SQUARE_ELS_OFFSETS[i] = $('#' + SQUARE_ELS_IDS[i]).offset();\r\n  }\r\n}\r\n\r\nfunction removeSquareHighlights() {\r\n  boardEl.find('.' + CSS.square)\r\n    .removeClass(CSS.highlight1 + ' ' + CSS.highlight2);\r\n}\r\n\r\nfunction snapbackDraggedPiece() {\r\n  // there is no \"snapback\" for spare pieces\r\n  if (DRAGGED_PIECE_SOURCE === 'spare') {\r\n    trashDraggedPiece();\r\n    return;\r\n  }\r\n\r\n  removeSquareHighlights();\r\n\r\n  // animation complete\r\n  function complete() {\r\n    drawPositionInstant();\r\n    draggedPieceEl.css('display', 'none');\r\n\r\n    // run their onSnapbackEnd function\r\n    if (cfg.hasOwnProperty('onSnapbackEnd') === true &&\r\n      typeof cfg.onSnapbackEnd === 'function') {\r\n      cfg.onSnapbackEnd(DRAGGED_PIECE, DRAGGED_PIECE_SOURCE,\r\n        deepCopy(CURRENT_POSITION), CURRENT_ORIENTATION);\r\n    }\r\n  }\r\n\r\n  // get source square position\r\n  var sourceSquarePosition =\r\n    $('#' + SQUARE_ELS_IDS[DRAGGED_PIECE_SOURCE]).offset();\r\n\r\n  // animate the piece to the target square\r\n  var opts = {\r\n    duration: cfg.snapbackSpeed,\r\n    complete: complete\r\n  };\r\n  draggedPieceEl.animate(sourceSquarePosition, opts);\r\n\r\n  // set state\r\n  DRAGGING_A_PIECE = false;\r\n}\r\n\r\nfunction trashDraggedPiece() {\r\n  removeSquareHighlights();\r\n\r\n  // remove the source piece\r\n  var newPosition = deepCopy(CURRENT_POSITION);\r\n  delete newPosition[DRAGGED_PIECE_SOURCE];\r\n  setCurrentPosition(newPosition);\r\n\r\n  // redraw the position\r\n  drawPositionInstant();\r\n\r\n  // hide the dragged piece\r\n  draggedPieceEl.fadeOut(cfg.trashSpeed);\r\n\r\n  // set state\r\n  DRAGGING_A_PIECE = false;\r\n}\r\n\r\nfunction dropDraggedPieceOnSquare(square) {\r\n  removeSquareHighlights();\r\n\r\n  // update position\r\n  var newPosition = deepCopy(CURRENT_POSITION);\r\n  delete newPosition[DRAGGED_PIECE_SOURCE];\r\n  newPosition[square] = DRAGGED_PIECE;\r\n  setCurrentPosition(newPosition);\r\n\r\n  // get target square information\r\n  var targetSquarePosition = $('#' + SQUARE_ELS_IDS[square]).offset();\r\n\r\n  // animation complete\r\n  var complete = function() {\r\n    drawPositionInstant();\r\n    draggedPieceEl.css('display', 'none');\r\n\r\n    // execute their onSnapEnd function\r\n    if (cfg.hasOwnProperty('onSnapEnd') === true &&\r\n      typeof cfg.onSnapEnd === 'function') {\r\n      cfg.onSnapEnd(DRAGGED_PIECE_SOURCE, square, DRAGGED_PIECE);\r\n    }\r\n  };\r\n\r\n  // snap the piece to the target square\r\n  var opts = {\r\n    duration: cfg.snapSpeed,\r\n    complete: complete\r\n  };\r\n  draggedPieceEl.animate(targetSquarePosition, opts);\r\n\r\n  // set state\r\n  DRAGGING_A_PIECE = false;\r\n}\r\n\r\nfunction beginDraggingPiece(source, piece, x, y) {\r\n  // run their custom onDragStart function\r\n  // their custom onDragStart function can cancel drag start\r\n  if (typeof cfg.onDragStart === 'function' &&\r\n      cfg.onDragStart(source, piece,\r\n        deepCopy(CURRENT_POSITION), CURRENT_ORIENTATION) === false) {\r\n    return;\r\n  }\r\n\r\n  // set state\r\n  DRAGGING_A_PIECE = true;\r\n  DRAGGED_PIECE = piece;\r\n  DRAGGED_PIECE_SOURCE = source;\r\n\r\n  // if the piece came from spare pieces, location is offboard\r\n  if (source === 'spare') {\r\n    DRAGGED_PIECE_LOCATION = 'offboard';\r\n  }\r\n  else {\r\n    DRAGGED_PIECE_LOCATION = source;\r\n  }\r\n\r\n  // capture the x, y coords of all squares in memory\r\n  captureSquareOffsets();\r\n\r\n  // create the dragged piece\r\n  draggedPieceEl.attr('src', buildPieceImgSrc(piece))\r\n    .css({\r\n      display: '',\r\n      position: 'absolute',\r\n      left: x - (SQUARE_SIZE / 2),\r\n      top: y - (SQUARE_SIZE / 2)\r\n    });\r\n\r\n  if (source !== 'spare') {\r\n    // highlight the source square and hide the piece\r\n    $('#' + SQUARE_ELS_IDS[source]).addClass(CSS.highlight1)\r\n      .find('.' + CSS.piece).css('display', 'none');\r\n  }\r\n}\r\n\r\nfunction updateDraggedPiece(x, y) {\r\n  // put the dragged piece over the mouse cursor\r\n  draggedPieceEl.css({\r\n    left: x - (SQUARE_SIZE / 2),\r\n    top: y - (SQUARE_SIZE / 2)\r\n  });\r\n\r\n  // get location\r\n  var location = isXYOnSquare(x, y);\r\n\r\n  // do nothing if the location has not changed\r\n  if (location === DRAGGED_PIECE_LOCATION) return;\r\n\r\n  // remove highlight from previous square\r\n  if (validSquare(DRAGGED_PIECE_LOCATION) === true) {\r\n    $('#' + SQUARE_ELS_IDS[DRAGGED_PIECE_LOCATION])\r\n      .removeClass(CSS.highlight2);\r\n  }\r\n\r\n  // add highlight to new square\r\n  if (validSquare(location) === true) {\r\n    $('#' + SQUARE_ELS_IDS[location]).addClass(CSS.highlight2);\r\n  }\r\n\r\n  // run onDragMove\r\n  if (typeof cfg.onDragMove === 'function') {\r\n    cfg.onDragMove(location, DRAGGED_PIECE_LOCATION,\r\n      DRAGGED_PIECE_SOURCE, DRAGGED_PIECE,\r\n      deepCopy(CURRENT_POSITION), CURRENT_ORIENTATION);\r\n  }\r\n\r\n  // update state\r\n  DRAGGED_PIECE_LOCATION = location;\r\n}\r\n\r\nfunction stopDraggedPiece(location) {\r\n  // determine what the action should be\r\n  var action = 'drop';\r\n  if (location === 'offboard' && cfg.dropOffBoard === 'snapback') {\r\n    action = 'snapback';\r\n  }\r\n  if (location === 'offboard' && cfg.dropOffBoard === 'trash') {\r\n    action = 'trash';\r\n  }\r\n\r\n  // run their onDrop function, which can potentially change the drop action\r\n  if (cfg.hasOwnProperty('onDrop') === true &&\r\n    typeof cfg.onDrop === 'function') {\r\n    var newPosition = deepCopy(CURRENT_POSITION);\r\n\r\n    // source piece is a spare piece and position is off the board\r\n    //if (DRAGGED_PIECE_SOURCE === 'spare' && location === 'offboard') {...}\r\n    // position has not changed; do nothing\r\n\r\n    // source piece is a spare piece and position is on the board\r\n    if (DRAGGED_PIECE_SOURCE === 'spare' && validSquare(location) === true) {\r\n      // add the piece to the board\r\n      newPosition[location] = DRAGGED_PIECE;\r\n    }\r\n\r\n    // source piece was on the board and position is off the board\r\n    if (validSquare(DRAGGED_PIECE_SOURCE) === true && location === 'offboard') {\r\n      // remove the piece from the board\r\n      delete newPosition[DRAGGED_PIECE_SOURCE];\r\n    }\r\n\r\n    // source piece was on the board and position is on the board\r\n    if (validSquare(DRAGGED_PIECE_SOURCE) === true &&\r\n      validSquare(location) === true) {\r\n      // move the piece\r\n      delete newPosition[DRAGGED_PIECE_SOURCE];\r\n      newPosition[location] = DRAGGED_PIECE;\r\n    }\r\n\r\n    var oldPosition = deepCopy(CURRENT_POSITION);\r\n\r\n    var result = cfg.onDrop(DRAGGED_PIECE_SOURCE, location, DRAGGED_PIECE,\r\n      newPosition, oldPosition, CURRENT_ORIENTATION);\r\n    if (result === 'snapback' || result === 'trash') {\r\n      action = result;\r\n    }\r\n  }\r\n\r\n  // do it!\r\n  if (action === 'snapback') {\r\n    snapbackDraggedPiece();\r\n  }\r\n  else if (action === 'trash') {\r\n    trashDraggedPiece();\r\n  }\r\n  else if (action === 'drop') {\r\n    dropDraggedPieceOnSquare(location);\r\n  }\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Public Methods\r\n//------------------------------------------------------------------------------\r\n\r\n// clear the board\r\nwidget.clear = function(useAnimation) {\r\n  widget.position({}, useAnimation);\r\n};\r\n\r\n// remove the widget from the page\r\nwidget.destroy = function() {\r\n  // remove markup\r\n  containerEl.html('');\r\n  draggedPieceEl.remove();\r\n\r\n  // remove event handlers\r\n  containerEl.unbind();\r\n};\r\n\r\n// shorthand method to get the current FEN\r\nwidget.fen = function() {\r\n  return widget.position('fen');\r\n};\r\n\r\n// flip orientation\r\nwidget.flip = function() {\r\n  return widget.orientation('flip');\r\n};\r\n\r\n/*\r\n// TODO: write this, GitHub Issue #5\r\nwidget.highlight = function() {\r\n\r\n};\r\n*/\r\n\r\n// move pieces\r\nwidget.move = function() {\r\n  // no need to throw an error here; just do nothing\r\n  if (arguments.length === 0) return;\r\n\r\n  var useAnimation = true;\r\n\r\n  // collect the moves into an object\r\n  var moves = {};\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    // any \"false\" to this function means no animations\r\n    if (arguments[i] === false) {\r\n      useAnimation = false;\r\n      continue;\r\n    }\r\n\r\n    // skip invalid arguments\r\n    if (validMove(arguments[i]) !== true) {\r\n      error(2826, 'Invalid move passed to the move method.', arguments[i]);\r\n      continue;\r\n    }\r\n\r\n    var tmp = arguments[i].split('-');\r\n    moves[tmp[0]] = tmp[1];\r\n  }\r\n\r\n  // calculate position from moves\r\n  var newPos = calculatePositionFromMoves(CURRENT_POSITION, moves);\r\n\r\n  // update the board\r\n  widget.position(newPos, useAnimation);\r\n\r\n  // return the new position object\r\n  return newPos;\r\n};\r\n\r\nwidget.orientation = function(arg) {\r\n  // no arguments, return the current orientation\r\n  if (arguments.length === 0) {\r\n    return CURRENT_ORIENTATION;\r\n  }\r\n\r\n  // set to white or black\r\n  if (arg === 'white' || arg === 'black') {\r\n    CURRENT_ORIENTATION = arg;\r\n    drawBoard();\r\n    return CURRENT_ORIENTATION;\r\n  }\r\n\r\n  // flip orientation\r\n  if (arg === 'flip') {\r\n    CURRENT_ORIENTATION = (CURRENT_ORIENTATION === 'white') ? 'black' : 'white';\r\n    drawBoard();\r\n    return CURRENT_ORIENTATION;\r\n  }\r\n\r\n  error(5482, 'Invalid value passed to the orientation method.', arg);\r\n};\r\n\r\nwidget.position = function(position, useAnimation) {\r\n  // no arguments, return the current position\r\n  if (arguments.length === 0) {\r\n    return deepCopy(CURRENT_POSITION);\r\n  }\r\n\r\n  // get position as FEN\r\n  if (typeof position === 'string' && position.toLowerCase() === 'fen') {\r\n    return objToFen(CURRENT_POSITION);\r\n  }\r\n\r\n  // default for useAnimations is true\r\n  if (useAnimation !== false) {\r\n    useAnimation = true;\r\n  }\r\n\r\n  // start position\r\n  if (typeof position === 'string' && position.toLowerCase() === 'start') {\r\n    position = deepCopy(START_POSITION);\r\n  }\r\n\r\n  // convert FEN to position object\r\n  if (validFen(position) === true) {\r\n    position = fenToObj(position);\r\n  }\r\n\r\n  // validate position object\r\n  if (validPositionObject(position) !== true) {\r\n    error(6482, 'Invalid value passed to the position method.', position);\r\n    return;\r\n  }\r\n\r\n  if (useAnimation === true) {\r\n    // start the animations\r\n    doAnimations(calculateAnimations(CURRENT_POSITION, position),\r\n      CURRENT_POSITION, position);\r\n\r\n    // set the new position\r\n    setCurrentPosition(position);\r\n  }\r\n  // instant update\r\n  else {\r\n    setCurrentPosition(position);\r\n    drawPositionInstant();\r\n  }\r\n};\r\n\r\nwidget.resize = function() {\r\n  // calulate the new square size\r\n  SQUARE_SIZE = calculateSquareSize();\r\n\r\n  // set board width\r\n  boardEl.css('width', (SQUARE_SIZE * 8) + 'px');\r\n\r\n  // set drag piece size\r\n  draggedPieceEl.css({\r\n    height: SQUARE_SIZE,\r\n    width: SQUARE_SIZE\r\n  });\r\n\r\n  // spare pieces\r\n  if (cfg.sparePieces === true) {\r\n    containerEl.find('.' + CSS.sparePieces)\r\n      .css('paddingLeft', (SQUARE_SIZE + BOARD_BORDER_SIZE) + 'px');\r\n  }\r\n\r\n  // redraw the board\r\n  drawBoard();\r\n};\r\n\r\n// set the starting position\r\nwidget.start = function(useAnimation) {\r\n  widget.position('start', useAnimation);\r\n};\r\n\r\n//------------------------------------------------------------------------------\r\n// Browser Events\r\n//------------------------------------------------------------------------------\r\n\r\nfunction isTouchDevice() {\r\n  return ('ontouchstart' in document.documentElement);\r\n}\r\n\r\n// reference: http://www.quirksmode.org/js/detect.html\r\nfunction isMSIE() {\r\n  return (navigator && navigator.userAgent &&\r\n      navigator.userAgent.search(/MSIE/) !== -1);\r\n}\r\n\r\nfunction stopDefault(e) {\r\n  e.preventDefault();\r\n}\r\n\r\nfunction mousedownSquare(e) {\r\n  // do nothing if we're not draggable\r\n  if (cfg.draggable !== true) return;\r\n\r\n  var square = $(this).attr('data-square');\r\n\r\n  // no piece on this square\r\n  if (validSquare(square) !== true ||\r\n      CURRENT_POSITION.hasOwnProperty(square) !== true) {\r\n    return;\r\n  }\r\n\r\n  beginDraggingPiece(square, CURRENT_POSITION[square], e.pageX, e.pageY);\r\n}\r\n\r\nfunction touchstartSquare(e) {\r\n  // do nothing if we're not draggable\r\n  if (cfg.draggable !== true) return;\r\n\r\n  var square = $(this).attr('data-square');\r\n\r\n  // no piece on this square\r\n  if (validSquare(square) !== true ||\r\n      CURRENT_POSITION.hasOwnProperty(square) !== true) {\r\n    return;\r\n  }\r\n\r\n  e = e.originalEvent;\r\n  beginDraggingPiece(square, CURRENT_POSITION[square],\r\n    e.changedTouches[0].pageX, e.changedTouches[0].pageY);\r\n}\r\n\r\nfunction mousedownSparePiece(e) {\r\n  // do nothing if sparePieces is not enabled\r\n  if (cfg.sparePieces !== true) return;\r\n\r\n  var piece = $(this).attr('data-piece');\r\n\r\n  beginDraggingPiece('spare', piece, e.pageX, e.pageY);\r\n}\r\n\r\nfunction touchstartSparePiece(e) {\r\n  // do nothing if sparePieces is not enabled\r\n  if (cfg.sparePieces !== true) return;\r\n\r\n  var piece = $(this).attr('data-piece');\r\n\r\n  e = e.originalEvent;\r\n  beginDraggingPiece('spare', piece,\r\n    e.changedTouches[0].pageX, e.changedTouches[0].pageY);\r\n}\r\n\r\nfunction mousemoveWindow(e) {\r\n  // do nothing if we are not dragging a piece\r\n  if (DRAGGING_A_PIECE !== true) return;\r\n\r\n  updateDraggedPiece(e.pageX, e.pageY);\r\n}\r\n\r\nfunction touchmoveWindow(e) {\r\n  // do nothing if we are not dragging a piece\r\n  if (DRAGGING_A_PIECE !== true) return;\r\n\r\n  // prevent screen from scrolling\r\n  e.preventDefault();\r\n\r\n  updateDraggedPiece(e.originalEvent.changedTouches[0].pageX,\r\n    e.originalEvent.changedTouches[0].pageY);\r\n}\r\n\r\nfunction mouseupWindow(e) {\r\n  // do nothing if we are not dragging a piece\r\n  if (DRAGGING_A_PIECE !== true) return;\r\n\r\n  // get the location\r\n  var location = isXYOnSquare(e.pageX, e.pageY);\r\n\r\n  stopDraggedPiece(location);\r\n}\r\n\r\nfunction touchendWindow(e) {\r\n  // do nothing if we are not dragging a piece\r\n  if (DRAGGING_A_PIECE !== true) return;\r\n\r\n  // get the location\r\n  var location = isXYOnSquare(e.originalEvent.changedTouches[0].pageX,\r\n    e.originalEvent.changedTouches[0].pageY);\r\n\r\n  stopDraggedPiece(location);\r\n}\r\n\r\nfunction mouseenterSquare(e) {\r\n  // do not fire this event if we are dragging a piece\r\n  // NOTE: this should never happen, but it's a safeguard\r\n  if (DRAGGING_A_PIECE !== false) return;\r\n\r\n  if (cfg.hasOwnProperty('onMouseoverSquare') !== true ||\r\n    typeof cfg.onMouseoverSquare !== 'function') return;\r\n\r\n  // get the square\r\n  var square = $(e.currentTarget).attr('data-square');\r\n\r\n  // NOTE: this should never happen; defensive\r\n  if (validSquare(square) !== true) return;\r\n\r\n  // get the piece on this square\r\n  var piece = false;\r\n  if (CURRENT_POSITION.hasOwnProperty(square) === true) {\r\n    piece = CURRENT_POSITION[square];\r\n  }\r\n\r\n  // execute their function\r\n  cfg.onMouseoverSquare(square, piece, deepCopy(CURRENT_POSITION),\r\n    CURRENT_ORIENTATION);\r\n}\r\n\r\nfunction mouseleaveSquare(e) {\r\n  // do not fire this event if we are dragging a piece\r\n  // NOTE: this should never happen, but it's a safeguard\r\n  if (DRAGGING_A_PIECE !== false) return;\r\n\r\n  if (cfg.hasOwnProperty('onMouseoutSquare') !== true ||\r\n    typeof cfg.onMouseoutSquare !== 'function') return;\r\n\r\n  // get the square\r\n  var square = $(e.currentTarget).attr('data-square');\r\n\r\n  // NOTE: this should never happen; defensive\r\n  if (validSquare(square) !== true) return;\r\n\r\n  // get the piece on this square\r\n  var piece = false;\r\n  if (CURRENT_POSITION.hasOwnProperty(square) === true) {\r\n    piece = CURRENT_POSITION[square];\r\n  }\r\n\r\n  // execute their function\r\n  cfg.onMouseoutSquare(square, piece, deepCopy(CURRENT_POSITION),\r\n    CURRENT_ORIENTATION);\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Initialization\r\n//------------------------------------------------------------------------------\r\n\r\nfunction addEvents() {\r\n  // prevent browser \"image drag\"\r\n  $('body').on('mousedown mousemove', '.' + CSS.piece, stopDefault);\r\n\r\n  // mouse drag pieces\r\n  boardEl.on('mousedown', '.' + CSS.square, mousedownSquare);\r\n  containerEl.on('mousedown', '.' + CSS.sparePieces + ' .' + CSS.piece,\r\n    mousedownSparePiece);\r\n\r\n  // mouse enter / leave square\r\n  boardEl.on('mouseenter', '.' + CSS.square, mouseenterSquare)\r\n    .on('mouseleave', '.' + CSS.square, mouseleaveSquare);\r\n\r\n  // IE doesn't like the events on the window object, but other browsers\r\n  // perform better that way\r\n  if (isMSIE() === true) {\r\n    // IE-specific prevent browser \"image drag\"\r\n    document.ondragstart = function() { return false; };\r\n\r\n    $('body').on('mousemove', mousemoveWindow)\r\n      .on('mouseup', mouseupWindow);\r\n  }\r\n  else {\r\n    $(window).on('mousemove', mousemoveWindow)\r\n      .on('mouseup', mouseupWindow);\r\n  }\r\n\r\n  // touch drag pieces\r\n  if (isTouchDevice() === true) {\r\n    boardEl.on('touchstart', '.' + CSS.square, touchstartSquare);\r\n    containerEl.on('touchstart', '.' + CSS.sparePieces + ' .' + CSS.piece,\r\n      touchstartSparePiece);\r\n    $(window).on('touchmove', touchmoveWindow)\r\n      .on('touchend', touchendWindow);\r\n  }\r\n}\r\n\r\nfunction initDom() {\r\n  // create unique IDs for all the elements we will create\r\n  createElIds();\r\n\r\n  // build board and save it in memory\r\n  containerEl.html(buildBoardContainer());\r\n  boardEl = containerEl.find('.' + CSS.board);\r\n\r\n  if (cfg.sparePieces === true) {\r\n    sparePiecesTopEl = containerEl.find('.' + CSS.sparePiecesTop);\r\n    sparePiecesBottomEl = containerEl.find('.' + CSS.sparePiecesBottom);\r\n  }\r\n\r\n  // create the drag piece\r\n  var draggedPieceId = uuid();\r\n  $('body').append(buildPiece('wP', true, draggedPieceId));\r\n  draggedPieceEl = $('#' + draggedPieceId);\r\n\r\n  // get the border size\r\n  BOARD_BORDER_SIZE = parseInt(boardEl.css('borderLeftWidth'), 10);\r\n\r\n  // set the size and draw the board\r\n  widget.resize();\r\n}\r\n\r\nfunction init() {\r\n  if (checkDeps() !== true ||\r\n      expandConfig() !== true) return;\r\n\r\n  initDom();\r\n  addEvents();\r\n}\r\n\r\n// go time\r\ninit();\r\n\r\n// return the widget object\r\nreturn widget;\r\n\r\n}; // end window.ChessBoard\r\n\r\n// expose util functions\r\nChessBoard.fenToObj = fenToObj;\r\nChessBoard.objToFen = objToFen;\r\n\r\nmodule.exports = ChessBoard;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")}]);