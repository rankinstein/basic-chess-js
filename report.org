* Introduction
- Chess AI's
- Implemented using Chess.js
  - Difficulties finding the best version. npm and github master missing more performant moves_ugly()
- Examination of heuristic functions and move ordering of alpha-beta search
  - direct
  - move ordering by captures, forward moves, backward moves
  - positional weightings
- Project can be viewed at: URLHERE
Chess is an interesting programming problem because its complexity. There are approximately 10^120 different positions which is far greater than the number of atoms in the universe (~10^80). People have been theorizing and developing chess AI's since the dawn of computers.

The focus of this project is not to build the strongest AI but rather one that is intelligent and responds quickly. This project is an examination of the minimax algorithm, alpha-beta pruning technique and how simple heuristics and board evaluation procedures can produce a chess AI which is able to challenge casual chess players.

* Technology
This project was implemented in JavaScript. The driving factors in the choice of language were ease of implementing the GUI, personal familiarity, availability of move generations libraries and portability. The inspiration for this project was provided by the blog post "A step-by-step guide to building a simple chess AI"[4] and its the source code provided on the project's github page[5]. 

** Chess.js
Chess.js is a JavaScript chess engine providing move generation, piece placement, and game over detection. It was difficult to find the best version of the library. The blog post used a non-standard version which exposes the internal move generation methods which were substantially faster but not human readable. The first bottleneck in performance was gathering the list of possible moves. The master branch of Chess.js only provides the =.moves()= method which was roughly one order slower than the =.ugly_moves()= method.

** Chessboard.js
Chessboard.js provides a chess board interface and when integrated with chess.js can provide a rich user experience. For this project the "Highlight Legal Moves" example[6] from the Chessboard.js documentation was the basis for the user interface.

- 5000-10000 positions evaluated per second
- Focus on casual play thus faster evaluation preferred over strength desired response time under 60 seconds and preferrably under 10.
- Given these restrictions able to examine approximately 10,000-100,000 nodes per move.
- Generally a depth of 3 or 4

* Minimax algorithm
The minimax algorithm is a basic way to model a competitive multi-agent environment. The search traverses a tree of possible game sequences depth first. At the leaves the utility is evaluated and values are propagated back to the root alternate between minimizing (min node) and maximizing (max node) the value of its children. For a tree with a branching factor B and depth D the number of nodes is B^D. For most applications the minimax algorithm is impractical because of the exponential increase in runtime. The branching factor for chess is approximately 35 [2].

* Alpha-beta pruning
Alpha-beta pruning is an optimization on minimax which prunes out sections of the tree that cannot be reached by optimal play. In the best case the number of nodes can be reduced to approximately B^{D/2}. Reaching the best case bound requires visiting the optimal path first.

* Optimizations
There are numerous ways to optimize a chess AI and alpha-beta pruning. including move ordering, transposition tables,
  

* Results


* Future Work
The first enchancement would be using execution of the principle variation first through implementing iterative deepening.

Other enhancements include transposition tables to avoid duplicate calculations. Additionally more sophistocated move ordering heuristics could be investigated.


* References
1.
http://www.ece.uvic.ca/~ceng420/2011/framework/marsland91computer.pdf

2.
https://www.gamedev.net/resources/_/technical/artificial-intelligence/chess-programming-part-iv-basic-search-r1171

3. peice-square values
https://chessprogramming.wikispaces.com/Point+Value
https://chessprogramming.wikispaces.com/Simplified+evaluation+function

4. project inspiration
https://medium.freecodecamp.com/simple-chess-ai-step-by-step-1d55a9266977

5. 
https://github.com/lhartikk/simple-chess-ai/blob/master/

6.
http://chessboardjs.com/examples#5003
